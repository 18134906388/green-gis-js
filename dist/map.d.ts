import { Bound } from "./util/bound";
import { Projection } from "./projection/projection";
import { Graphic } from "./element/graphic";
import { FeatureLayer } from "./layer/feature-layer";
import { Editor } from "./editor/editor";
import { Viewer } from "./viewer";
import { Subject } from "./util/subject";
import { Tooltip } from "./tooltip/tooltip";
export declare class Map extends Subject {
    private _container;
    private _canvas;
    private _ctx;
    private _option;
    private _drag;
    private _touch;
    private _zoom;
    minZoom: number;
    maxZoom: number;
    private _center;
    private _extent;
    private _projection;
    private _defaultGraphicLayer;
    private _viewer;
    private _editor;
    private _tooltip;
    get container(): HTMLDivElement;
    get viewer(): Viewer;
    get tooltip(): Tooltip;
    get editor(): Editor;
    set editor(value: Editor);
    get center(): number[];
    get extent(): Bound;
    get zoom(): number;
    get projection(): Projection;
    constructor(id: string | HTMLDivElement, option?: any);
    disableDoubleClick(): void;
    enableDoubleClick(): void;
    setProjection(projection: any): void;
    setView(center?: number[], zoom?: number): void;
    fitBound(bound: Bound): void;
    addLayer(layer: FeatureLayer): void;
    insertLayer(layer: FeatureLayer, index?: number): void;
    removeLayer(layer: FeatureLayer): void;
    clearLayers(): void;
    addGraphic(graphic: Graphic): void;
    removeGraphic(graphic: Graphic): void;
    clearGraphics(): void;
    updateExtent(): void;
    redraw(): void;
    clear(): void;
    resize(): void;
    _onResize(event: any): void;
    _onClick(event: any): void;
    _onDoubleClick(event: any): void;
    _onMouseDown(event: any): void;
    _onMouseMove(event: any): void;
    _onMouseUp(event: any): void;
    _onWheel(event: any): void;
    _onTouchStart(event: any): void;
    _onTouchMove(event: any): void;
    _onTouchEnd(event: any): void;
    showTooltip(feature: any, field: any): void;
    hideTooltip(): void;
    destroy(): void;
}
