{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../dist/data/feature-class.js","webpack:///../dist/data/field.js","webpack:///../dist/editor/editor.js","webpack:///../dist/element/feature.js","webpack:///../dist/element/graphic.js","webpack:///../dist/entity.js","webpack:///../dist/geometry/geometry.js","webpack:///../dist/geometry/multiple-point.js","webpack:///../dist/geometry/multiple-polygon.js","webpack:///../dist/geometry/multiple-polyline.js","webpack:///../dist/geometry/point.js","webpack:///../dist/geometry/polygon.js","webpack:///../dist/geometry/polyline.js","webpack:///../dist/index.js","webpack:///../dist/label/label.js","webpack:///../dist/layer/feature-layer.js","webpack:///../dist/layer/graphic-layer.js","webpack:///../dist/layer/layer.js","webpack:///../dist/map.js","webpack:///../dist/projection/bd09.js","webpack:///../dist/projection/gcj02.js","webpack:///../dist/projection/projection.js","webpack:///../dist/projection/web-mercator.js","webpack:///../dist/renderer/category-renderer.js","webpack:///../dist/renderer/class-renderer.js","webpack:///../dist/renderer/renderer.js","webpack:///../dist/renderer/simple-renderer.js","webpack:///../dist/symbol/symbol.js","webpack:///../dist/tooltip/tooltip.js","webpack:///../dist/util/bound.js","webpack:///../dist/util/color.js","webpack:///../dist/util/subject.js","webpack:///../dist/util/utility.js","webpack:///../dist/viewer.js","webpack:///./resize.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACO;AACV;AACM;AACF;AACiB;AACE;AACN;AACpD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAY;AAC7C,sCAAsC,qDAAK;AAC3C,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,yCAAyC,2DAAQ;AACjD,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,wCAAwC,yDAAO;AAC/C,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,2CAA2C,sEAAa;AACxD,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,8CAA8C,4EAAgB;AAC9D,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,6CAA6C,0EAAe;AAC5D,4CAA4C,wDAAO;AACnD;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACT;AACH;AACM;AACN;AACM;AACF;AACvC,qBAAqB,qDAAO;AACnC;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iEAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qDAAK;AAC9D;AACA,mCAAmC,wDAAO,YAAY,2DAAY;AAClE;AACA;AACA;AACA,8DAA8D,2DAAQ;AACtE;AACA;AACA,sCAAsC,qDAAK;AAC3C,uCAAuC,wDAAO,YAAY,2DAAY;AACtE;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,8DAA8D,yDAAO;AACrE;AACA;AACA;AACA,0CAA0C,qDAAK;AAC/C,2CAA2C,wDAAO,YAAY,2DAAY;AAC1E;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,qDAAK;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qDAAK;AAC9D;AACA;AACA;AACA;AACA,8DAA8D,2DAAQ;AACtE;AACA;AACA;AACA;AACA;AACA,0CAA0C,qDAAK;AAC/C;AACA,2CAA2C,wDAAO,YAAY,2DAAY;AAC1E;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,yDAAO;AACrE;AACA;AACA;AACA;AACA;AACA,0CAA0C,qDAAK;AAC/C;AACA,2CAA2C,wDAAO,YAAY,2DAAY;AAC1E;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpPA;AAAA;AAAA;AAAA;AAAA;AAAuE;AACd;AACf;AACnC,sBAAsB,qDAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB;AACvG;AACA;AACA;AACA,uCAAuC,oEAAW,4CAA4C,+DAAgB;AAC9G;AACA;AACA;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,oDAAoD;AAChI;AACA;AACA,2EAA2E,oDAAoD;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAyD;AACf;AACnC,sBAAsB,qDAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,oDAAoD;AAChI;AACA;AACA,2EAA2E,oDAAoD;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuE;AACd;AAClD;AACP;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AAClC;AACP;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AAC9B;AACP;AACA;AACA;AACA,yBAAyB;AACzB;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB,KAAK;AAC5G;AACA,+BAA+B,cAAc;AAC7C,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA,sCAAsC,oEAAW,4CAA4C,+DAAgB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,oEAAW,KAAK;AAC7E;AACA,mDAAmD,oEAAW;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACsD;AAChB;AACmC;AAChB;AACzD;AACO,4BAA4B,kDAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iEAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gEAAiB;AACvD;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iEAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC,gEAAiB;AACzD;AACA;AACA,6CAA6C,iEAAkB;AAC/D;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA,mBAAmB,wDAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;;;;;;ACrG5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AAChB;AACc;AACK;AACzD;AACO,8BAA8B,kDAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA,+BAA+B,oEAAW,4CAA4C,+DAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,eAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AAChB;AACc;AACK;AACzD;AACO,+BAA+B,kDAAQ;AAC9C;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA,+BAA+B,oEAAW,4CAA4C,+DAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;;;;;;ACvI/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACsD;AAChB;AACgE;AAC7C;AACzD;AACO,oBAAoB,kDAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA;AACA,+BAA+B,oEAAW,4CAA4C,gEAAiB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gEAAiB;AACnD;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iEAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2DAAY;AACnD;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4DAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oCAAoC,gEAAiB;AACrD;AACA;AACA,yCAAyC,iEAAkB;AAC3D;AACA;AACA,yCAAyC,2DAAY;AACrD;AACA;AACA;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA,mBAAmB,wDAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;;;;;;ACxJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AAChB;AACc;AACK;AACzD;AACO,sBAAsB,kDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+BAA+B,oEAAW,4CAA4C,+DAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,eAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AAChB;AAC2B;AACR;AACzD;AACO,uBAAuB,kDAAQ;AACtC;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW,4CAA4C,+DAAgB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8BAA8B,0DAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAc,0BAA0B,oEAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;;;;;;ACzLvsB;AACG;AACA;AACY;AACR;AACG;AACE;AACA;AACE;AACH;AACG;AACD;AACO;AACG;AACD;AACd;AACQ;AACA;AACR;AACI;AACF;AACI;AACO;AACE;AACH;AACF;AACE;AACR;AACC;AACJ;AACF;AACA;AACE;;;;;;;;;;;;;AChC/B;AAAA;AAAO;AACP;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACyB;AACI;AACI;AACN;AACS;AAC1B;AACO;AAC1C,2BAA2B,4CAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA,2CAA2C,+DAAY;AACvD;AACA,gDAAgD,qDAAK;AACrD;AACA;AACA,mFAAmF,iEAAc;AACjG;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D;AACA;AACA;AACA,iBAAiB,MAAM,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA,uEAAuE,4DAAa;AACpF;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC,oEAAW;AAC/C;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA,kFAAkF,iEAAc;AAChG;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB;AACvD;AACA;AACA,aAAa,MAAM,KAAK;AACxB;AACA;AACA,aAAa;AACb;AACA;AACA,+CAA+C,oEAAW;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,kDAAkD,2DAA2D;AAC7G;AACA;AACA,+CAA+C,2DAA2D;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wEAAc;AACpD;AACA;AACA,2CAA2C,4EAAgB;AAC3D;AACA;AACA;AACA;AACA,2CAA2C,sEAAa;AACxD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtJA;AAAA;AAAA;AAAA;AAAgC;AACyB;AAClD,2BAA2B,4CAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+CAA+C,oEAAW;AAC1D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,kDAAkD,2DAA2D;AAC7G;AACA;AACA,+CAA+C,2DAA2D;AAC1G;AACA;AACA,mDAAmD,2DAA2D;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAyD;AAClD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAW,2CAA2C;AACrF;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AAChB;AACmB;AACH;AACZ;AACA;AACP;AACO;AACG;AACrC,kBAAkB,qDAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iEAAY;AACpD;AACA;AACA;AACA,yDAAyD,cAAc,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAAM;AACjC,4CAA4C,CAAC,qDAAO,uCAAuC,EAAE;AAC7F,2CAA2C,CAAC,qDAAO,0CAA0C,EAAE;AAC/F;AACA,2BAA2B,qDAAM;AACjC,4CAA4C,CAAC,qDAAO,uCAAuC,EAAE;AAC7F,2CAA2C,CAAC,qDAAO,0CAA0C,EAAE;AAC/F,4CAA4C,uBAAuB,EAAE;AACrE,2CAA2C,uBAAuB,EAAE;AACpE;AACA,4BAA4B,wDAAO;AACnC,+BAA+B,oEAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAK;AAChC;AACA,6DAA6D,+EAA+E;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iEAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChSA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACgB;AACtB;AAChC;AACO,mBAAmB,sDAAU;AACpC,uBAAuB,sDAAU;AACjC;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA;AACA,0BAA0B,sDAAU;AACpC,yBAAyB,4CAAK;AAC9B;AACA;AACA,+BAA+B,sDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAsC;AACgB;AACtD;AACO,oBAAoB,sDAAU;AACrC,uBAAuB,sDAAU;AACjC;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA,0BAA0B,sDAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjGA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA,gDAAgD;AAChD,CAAC,gCAAgC;AACjC;AACO;AACP;AACA,yBAAyB,WAAW;AACpC;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAsC;AACI;AACnC,0BAA0B,sDAAU;AAC3C;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyF;AACrC;AACd;AAC/B;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,gEAAiB;AAC7D,4CAA4C,iDAAK;AACjD,8CAA8C,iDAAK;AACnD;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,+DAAgB;AAC5D,8CAA8C,iDAAK;AACnD;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,+DAAgB;AAC5D,4CAA4C,iDAAK;AACjD,8CAA8C,iDAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAO;AACP;;;;;;;;;;;;;ACDA;AAAA;AAAO;AACP;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AAC/B;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,mCAAmC;AACnC;AACA;AACO;AACP;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACO;AACP;AACA;AACA;AACA,qCAAqC;AACrC,mCAAmC;AACnC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA,qCAAqC;AACrC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,qCAAqC;AACrC,4BAA4B;AAC5B;AACA,sCAAsC;AACtC;AACA;AACO;AACP;AACA;AACA;AACA;AACA,qCAAqC;AACrC,qCAAqC;AACrC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iDAAK,UAAU,iDAAK,iBAAiB,iDAAK;AACjE;AACA;AACA;;;;;;;;;;;;;ACnIA;AAAA;AAAA;AAA0C;AACnC;AACP;AACA;AACA;AACA;AACA,QAAQ,qDAAO;AACf,QAAQ,qDAAO;AACf;AACA;AACA,QAAQ,qDAAO;AACf,QAAQ,qDAAO;AACf;AACA;AACA,QAAQ,qDAAO;AACf;AACA;AACA;AACA;AACA,wDAAwD,2DAA2D,uDAAuD;AAC1K,+DAA+D,2BAA2B,0BAA0B;AACpH;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnCA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE,aAAa,EAAE,aAAa,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5CA;AAAA;AAAO;AACP;AACA;AACA;AACA,uCAAuC;AACvC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAyC;AAClC,qBAAqB,qDAAO;AACnC;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxGA;AAAA;AAciB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,yCAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,iCAAiC,kDAAY;AAC7C;AACA,iCAAiC,kDAAY;AAC7C;AACA,6BAA6B,oDAAc;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B,2CAAK,CAAC,gDAAU;;AAE1C","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./resize.js\");\n","import { Feature } from \"../element/feature\";\r\nimport { GeometryType } from \"../geometry/geometry\";\r\nimport { Point } from \"../geometry/point\";\r\nimport { Polyline } from \"../geometry/polyline\";\r\nimport { Polygon } from \"../geometry/polygon\";\r\nimport { MultiplePolygon } from \"../geometry/multiple-polygon\";\r\nimport { MultiplePolyline } from \"../geometry/multiple-polyline\";\r\nimport { MultiplePoint } from \"../geometry/multiple-point\";\r\nexport class FeatureClass {\r\n    constructor() {\r\n        this._fields = [];\r\n        this._features = [];\r\n    }\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    get features() {\r\n        return this._features;\r\n    }\r\n    get fields() {\r\n        return this._fields;\r\n    }\r\n    addFeature(feature) {\r\n        this._features.push(feature);\r\n    }\r\n    removeFeature(feature) {\r\n        const index = this._features.findIndex(item => item === feature);\r\n        index != -1 && this._features.splice(index, 1);\r\n    }\r\n    clearFeatures() {\r\n        this._features = [];\r\n    }\r\n    addField(field) {\r\n        this._fields.push(field);\r\n    }\r\n    removeField(field) {\r\n        const index = this._fields.findIndex(item => item === field);\r\n        index != -1 && this._fields.splice(index, 1);\r\n    }\r\n    clearFields() {\r\n        this._fields = [];\r\n    }\r\n    //TODO: multiple point line polygon is not supported\r\n    loadGeoJSON(data) {\r\n        Array.isArray(data.features) && data.features.forEach(item => {\r\n            switch (item.geometry.type) {\r\n                case \"Point\":\r\n                    //TODO: each feature has one type that is ridiculous, cause geojson is a featurecollection, not a featurelayer.\r\n                    this._type = GeometryType.Point;\r\n                    const point = new Point(item.geometry.coordinates[0], item.geometry.coordinates[1]);\r\n                    this._features.push(new Feature(point, item.properties));\r\n                    break;\r\n                case \"LineString\":\r\n                    this._type = GeometryType.Polyline;\r\n                    const polyline = new Polyline(item.geometry.coordinates);\r\n                    this._features.push(new Feature(polyline, item.properties));\r\n                    break;\r\n                case \"Polygon\":\r\n                    this._type = GeometryType.Polygon;\r\n                    const polygon = new Polygon(item.geometry.coordinates);\r\n                    this._features.push(new Feature(polygon, item.properties));\r\n                    break;\r\n                case \"MultiPoint\":\r\n                    this._type = GeometryType.Point;\r\n                    const multipoint = new MultiplePoint(item.geometry.coordinates);\r\n                    this._features.push(new Feature(multipoint, item.properties));\r\n                    break;\r\n                case \"MultiLineString\":\r\n                    this._type = GeometryType.Polyline;\r\n                    const multipolyline = new MultiplePolyline(item.geometry.coordinates);\r\n                    this._features.push(new Feature(multipolyline, item.properties));\r\n                    break;\r\n                case \"MultiPolygon\":\r\n                    this._type = GeometryType.Polygon;\r\n                    const multipolygon = new MultiplePolygon(item.geometry.coordinates);\r\n                    this._features.push(new Feature(multipolygon, item.properties));\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n","export var FieldType;\r\n(function (FieldType) {\r\n    FieldType[FieldType[\"String\"] = 0] = \"String\";\r\n    FieldType[FieldType[\"Number\"] = 1] = \"Number\";\r\n})(FieldType || (FieldType = {}));\r\nexport class Field {\r\n}\r\n","import { GraphicLayer } from \"../layer/graphic-layer\";\r\nimport { Graphic } from \"../element/graphic\";\r\nimport { Point } from \"../geometry/point\";\r\nimport { VertexSymbol } from \"../symbol/symbol\";\r\nimport { Subject } from \"../util/subject\";\r\nimport { Polyline } from \"../geometry/polyline\";\r\nimport { Polygon } from \"../geometry/polygon\";\r\nexport class Editor extends Subject {\r\n    constructor(map) {\r\n        super([\"mouseover\", \"mouseout\", \"startedit\", \"stopedit\"]); //when mouseover feature or vertex\r\n        this._drag = {\r\n            flag: false,\r\n            vertex: null,\r\n            start: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            end: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        this._map = map;\r\n        const container = map.container;\r\n        //create canvas\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this._canvas.style.cssText = \"position: absolute; height: 100%; width: 100%; z-index: 90\";\r\n        this._canvas.width = container.clientWidth;\r\n        this._canvas.height = container.clientHeight;\r\n        container.appendChild(this._canvas);\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n        this._onResize = this._onResize.bind(this);\r\n        this._extentChange = this._extentChange.bind(this);\r\n        this._switchEditing = this._switchEditing.bind(this);\r\n        this._map.on(\"resize\", this._onResize);\r\n        this._map.on(\"extent\", this._extentChange);\r\n    }\r\n    get editing() {\r\n        return this._editing;\r\n    }\r\n    setFeatureLayer(layer) {\r\n        if (this._editing) {\r\n            this._featureLayer = layer;\r\n            this._featureLayer.editing = true;\r\n            this._featureLayer.on(\"dblclick\", this._switchEditing);\r\n            //layer.draw(this._ctx, this._map.projection, this._map.extent, this._map.zoom);\r\n        }\r\n        else {\r\n            throw new Error(\"please start editing!\");\r\n        }\r\n    }\r\n    start() {\r\n        if (!this._editing) {\r\n            this._editing = true;\r\n            this._vertexLayer = new GraphicLayer();\r\n            this._handlers[\"startedit\"].forEach(handler => handler());\r\n        }\r\n        //TODO: edit stack for undo/redo\r\n    }\r\n    save() {\r\n    }\r\n    stop() {\r\n        if (this._editing) {\r\n            this._editing = false;\r\n            this._featureLayer.editing = false;\r\n            this._featureLayer.off(\"dblclick\", this._switchEditing);\r\n            this._featureLayer = null;\r\n            this._vertexLayer = null;\r\n            this.clear();\r\n            this._handlers[\"stopedit\"].forEach(handler => handler());\r\n        }\r\n    }\r\n    _onResize(event) {\r\n        this._canvas.width = this._map.container.clientWidth;\r\n        this._canvas.height = this._map.container.clientHeight;\r\n    }\r\n    _extentChange(event) {\r\n        this._ctx.setTransform(event.matrix.a, 0, 0, event.matrix.d, event.matrix.e, event.matrix.f);\r\n        this.redraw();\r\n    }\r\n    _switchEditing(event) {\r\n        if (!this._editingFeature) {\r\n            this._editingFeature = event.feature;\r\n            if (this._editingFeature.geometry instanceof Point) {\r\n                const point = this._editingFeature.geometry;\r\n                const vertex = new Graphic(point, new VertexSymbol());\r\n                this._vertexLayer.add(vertex);\r\n                this.redraw();\r\n            }\r\n            else if (this._editingFeature.geometry instanceof Polyline) {\r\n                const polyline = this._editingFeature.geometry;\r\n                polyline.lnglats.forEach(lnglat => {\r\n                    const point = new Point(lnglat[0], lnglat[1]);\r\n                    const vertex = new Graphic(point, new VertexSymbol());\r\n                    this._vertexLayer.add(vertex);\r\n                    vertex.on(\"dragstart\", (event) => {\r\n                        this._drag.vertex = vertex;\r\n                    });\r\n                    vertex.on(\"dblclick\", (event) => {\r\n                        this._vertexLayer.remove(vertex);\r\n                        polyline.splice(this._ctx, this._map.projection, [point.lng, point.lat]);\r\n                        this.redraw();\r\n                    });\r\n                });\r\n                this.redraw();\r\n            }\r\n            else if (this._editingFeature.geometry instanceof Polygon) {\r\n                const polygon = this._editingFeature.geometry;\r\n                polygon.lnglats.forEach(ring => {\r\n                    ring.forEach(lnglat => {\r\n                        const point = new Point(lnglat[0], lnglat[1]);\r\n                        const vertex = new Graphic(point, new VertexSymbol());\r\n                        this._vertexLayer.add(vertex);\r\n                        vertex.on(\"dragstart\", (event) => {\r\n                            this._drag.vertex = vertex;\r\n                        });\r\n                        vertex.on(\"dblclick\", (event) => {\r\n                            this._vertexLayer.remove(vertex);\r\n                            polygon.splice(this._ctx, this._map.projection, [point.lng, point.lat]);\r\n                            this.redraw();\r\n                        });\r\n                    });\r\n                });\r\n                this.redraw();\r\n            }\r\n        }\r\n        else if (this._editingFeature === event.feature) {\r\n            this._editingFeature = null;\r\n            this._vertexLayer.clear();\r\n            this.redraw();\r\n        }\r\n    }\r\n    redraw() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n        this._featureLayer && this._featureLayer.draw(this._ctx, this._map.projection, this._map.extent, this._map.zoom);\r\n        this._vertexLayer && this._vertexLayer.draw(this._ctx, this._map.projection, this._map.extent, this._map.zoom);\r\n    }\r\n    clear() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n    }\r\n    _onClick(event) {\r\n    }\r\n    _onDoubleClick(event) {\r\n        if (this._editingFeature && !(this._editingFeature.geometry instanceof Point)) {\r\n            const flag = this._vertexLayer.contain(event.offsetX, event.offsetY, this._map.projection, this._map.extent, this._map.zoom, \"dblclick\");\r\n            if (flag)\r\n                return;\r\n        }\r\n        this._featureLayer.contain(event.offsetX, event.offsetY, this._map.projection, this._map.extent, this._map.zoom, \"dblclick\");\r\n    }\r\n    _onMouseDown(event) {\r\n        if (this._editingFeature) {\r\n            this._drag.flag = this._vertexLayer.contain(event.offsetX, event.offsetY, this._map.projection, this._map.extent, this._map.zoom, \"dragstart\");\r\n            this._drag.start.x = event.x;\r\n            this._drag.start.y = event.y;\r\n        }\r\n    }\r\n    _onMouseMove(event) {\r\n        if (!this._drag.flag) {\r\n            const flag1 = this._featureLayer.contain(event.offsetX, event.offsetY, this._map.projection, this._map.extent, this._map.zoom, \"mousemove\");\r\n            const flag2 = this._vertexLayer.contain(event.offsetX, event.offsetY, this._map.projection, this._map.extent, this._map.zoom, \"mousemove\");\r\n            if (flag1 || flag2) {\r\n                this.emit(\"mouseover\", event);\r\n            }\r\n            else {\r\n                this.emit(\"mouseout\", event);\r\n            }\r\n        }\r\n    }\r\n    _onMouseUp(event) {\r\n        if (this._drag.flag) {\r\n            this._drag.end.x = event.x;\r\n            this._drag.end.y = event.y;\r\n            this._drag.flag = false;\r\n            if (this._editingFeature.geometry instanceof Point) {\r\n                const point = this._editingFeature.geometry;\r\n                point.move(this._ctx, this._map.projection, event.offsetX, event.offsetY);\r\n                this.redraw();\r\n            }\r\n            else if (this._editingFeature.geometry instanceof Polyline) {\r\n                if (this._drag.vertex) {\r\n                    const polyline = this._editingFeature.geometry;\r\n                    const point = this._drag.vertex.geometry;\r\n                    polyline.splice(this._ctx, this._map.projection, [point.lng, point.lat], event.offsetX, event.offsetY, !event.shiftKey);\r\n                    if (event.shiftKey) {\r\n                        const shift = new Point(point.lng, point.lat);\r\n                        shift.move(this._ctx, this._map.projection, event.offsetX, event.offsetY);\r\n                        const vertex = new Graphic(shift, new VertexSymbol());\r\n                        this._vertexLayer.add(vertex);\r\n                        vertex.on(\"dragstart\", (event) => {\r\n                            this._drag.vertex = vertex;\r\n                        });\r\n                        vertex.on(\"dblclick\", (event) => {\r\n                            this._vertexLayer.remove(vertex);\r\n                            polyline.splice(this._ctx, this._map.projection, [shift.lng, shift.lat]);\r\n                            this.redraw();\r\n                        });\r\n                    }\r\n                    else {\r\n                        point.move(this._ctx, this._map.projection, event.offsetX, event.offsetY);\r\n                    }\r\n                    this._drag.vertex = null;\r\n                    this.redraw();\r\n                }\r\n            }\r\n            else if (this._editingFeature.geometry instanceof Polygon) {\r\n                if (this._drag.vertex) {\r\n                    const polygon = this._editingFeature.geometry;\r\n                    const point = this._drag.vertex.geometry;\r\n                    polygon.splice(this._ctx, this._map.projection, [point.lng, point.lat], event.offsetX, event.offsetY, !event.shiftKey);\r\n                    if (event.shiftKey) {\r\n                        const shift = new Point(point.lng, point.lat);\r\n                        shift.move(this._ctx, this._map.projection, event.offsetX, event.offsetY);\r\n                        const vertex = new Graphic(shift, new VertexSymbol());\r\n                        this._vertexLayer.add(vertex);\r\n                        vertex.on(\"dragstart\", (event) => {\r\n                            this._drag.vertex = vertex;\r\n                        });\r\n                        vertex.on(\"dblclick\", (event) => {\r\n                            this._vertexLayer.remove(vertex);\r\n                            polygon.splice(this._ctx, this._map.projection, [shift.lng, shift.lat]);\r\n                            this.redraw();\r\n                        });\r\n                    }\r\n                    else {\r\n                        point.move(this._ctx, this._map.projection, event.offsetX, event.offsetY);\r\n                    }\r\n                    this._drag.vertex = null;\r\n                    this.redraw();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    destroy() {\r\n        this._featureLayer = null;\r\n        this._map.off(\"resize\", this._onResize);\r\n        this._map.off(\"extent\", this._extentChange);\r\n    }\r\n}\r\n","import { SimplePointSymbol, SimpleTextSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\nimport { Subject } from \"../util/subject\";\r\nexport class Feature extends Subject {\r\n    constructor(geometry, properties) {\r\n        super([\"click\", \"dblclick\", \"mouseover\", \"mouseout\"]);\r\n        this.visible = true;\r\n        this._geometry = geometry;\r\n        this._properties = properties;\r\n    }\r\n    get geometry() {\r\n        return this._geometry;\r\n    }\r\n    get properties() {\r\n        return this._properties;\r\n    }\r\n    get bound() {\r\n        return this._geometry ? this._geometry.bound : null;\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) {\r\n        if (this.visible)\r\n            this._geometry.draw(ctx, projection, extent, symbol);\r\n    }\r\n    label(field, ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleTextSymbol()) {\r\n        if (this.visible)\r\n            this._geometry.label(this._properties[field.name], ctx, projection, extent, symbol);\r\n    }\r\n    intersect(projection = new WebMercator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            return this._geometry.intersect(projection, extent);\r\n    }\r\n    contain(screenX, screenY, event = undefined) {\r\n        if (this.visible) {\r\n            const flag = this._geometry.contain(screenX, screenY);\r\n            if (event == \"mousemove\") {\r\n                if (!this._contained && flag) {\r\n                    this._handlers[\"mouseover\"].forEach(handler => handler({ feature: this, screenX: screenX, screenY: screenY }));\r\n                }\r\n                else if (this._contained && !flag) {\r\n                    this._handlers[\"mouseout\"].forEach(handler => handler({ feature: this, screenX: screenX, screenY: screenY }));\r\n                }\r\n            }\r\n            this._contained = flag;\r\n            return flag;\r\n        }\r\n    }\r\n}\r\n","import { WebMercator } from \"../projection/web-mercator\";\r\nimport { Subject } from \"../util/subject\";\r\nexport class Graphic extends Subject {\r\n    constructor(geometry, symbol) {\r\n        super([\"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"dragstart\"]);\r\n        this.visible = true;\r\n        this._geometry = geometry;\r\n        this._symbol = symbol;\r\n    }\r\n    get geometry() {\r\n        return this._geometry;\r\n    }\r\n    get symbol() {\r\n        return this._symbol;\r\n    }\r\n    get bound() {\r\n        return this._geometry ? this._geometry.bound : null;\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            this._geometry.draw(ctx, projection, extent, this._symbol);\r\n    }\r\n    intersect(projection = new WebMercator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            return this._geometry.intersect(projection, extent);\r\n    }\r\n    contain(screenX, screenY, event = undefined) {\r\n        if (this.visible) {\r\n            const flag = this._geometry.contain(screenX, screenY);\r\n            if (event == \"mousemove\") {\r\n                if (!this._contained && flag) {\r\n                    this._handlers[\"mouseover\"].forEach(handler => handler({ feature: this, screenX: screenX, screenY: screenY }));\r\n                }\r\n                else if (this._contained && !flag) {\r\n                    this._handlers[\"mouseout\"].forEach(handler => handler({ feature: this, screenX: screenX, screenY: screenY }));\r\n                }\r\n            }\r\n            this._contained = flag;\r\n            return flag;\r\n        }\r\n    }\r\n}\r\n","//实体基类\r\nexport class Entity {\r\n    constructor() {\r\n        this._id = null;\r\n        this.create();\r\n    }\r\n    get ID() {\r\n        return this._id;\r\n    }\r\n    toString() {\r\n        return this._id;\r\n    }\r\n    print() {\r\n        Object.keys(this).forEach(property => {\r\n            console.log(property + \": \" + this[property]);\r\n        });\r\n    }\r\n    create() {\r\n        const timestamp = (new Date().getTime() / 1000 | 0).toString(16);\r\n        this._id = timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\r\n            return (Math.random() * 16 | 0).toString(16);\r\n        }).toLowerCase();\r\n    }\r\n}\r\n","import { SimplePointSymbol, SimpleTextSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\nexport var CoordinateType;\r\n(function (CoordinateType) {\r\n    CoordinateType[CoordinateType[\"Latlng\"] = 0] = \"Latlng\";\r\n    CoordinateType[CoordinateType[\"Projection\"] = 1] = \"Projection\";\r\n    CoordinateType[CoordinateType[\"Screen\"] = 2] = \"Screen\";\r\n})(CoordinateType || (CoordinateType = {}));\r\nexport var GeometryType;\r\n(function (GeometryType) {\r\n    GeometryType[GeometryType[\"Point\"] = 0] = \"Point\";\r\n    GeometryType[GeometryType[\"Polyline\"] = 1] = \"Polyline\";\r\n    GeometryType[GeometryType[\"Polygon\"] = 2] = \"Polygon\";\r\n})(GeometryType || (GeometryType = {}));\r\nexport class Geometry {\r\n    get bound() {\r\n        return this._bound;\r\n    }\r\n    project(projection) { }\r\n    ;\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) { }\r\n    ;\r\n    contain(screenX, screenY) { return false; }\r\n    intersect(projection = new WebMercator(), extent = projection.bound) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        return extent.intersect(this._bound);\r\n    }\r\n    label(text, ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleTextSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.fillStyle = symbol.fillStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        ctx.lineJoin = \"round\";\r\n        ctx.font = symbol.fontSize + \"px/1 \" + symbol.fontFamily + \" \" + symbol.fontWeight;\r\n        const center = this.getCenter(CoordinateType.Projection, projection);\r\n        const matrix = ctx.getTransform();\r\n        //keep pixel\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        const width = ctx.measureText(text).width + symbol.padding * 2;\r\n        const height = symbol.fontSize + symbol.padding * 2;\r\n        const screenX = (matrix.a * center[0] + matrix.e);\r\n        const screenY = (matrix.d * center[1] + matrix.f);\r\n        ctx.strokeRect(screenX + symbol.offsetX - symbol.padding, screenY + symbol.offsetY - symbol.padding, width, height);\r\n        ctx.fillRect(screenX + symbol.offsetX - symbol.padding, screenY + symbol.offsetY - symbol.padding, width, height);\r\n        ctx.textBaseline = \"top\";\r\n        ctx.fillStyle = symbol.fontColor;\r\n        ctx.fillText(text, screenX + symbol.offsetX, screenY + symbol.offsetY);\r\n        ctx.restore();\r\n    }\r\n    ;\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) { }\r\n    ;\r\n    distance(geometry, type, ctx, projection = new WebMercator()) {\r\n        const center = this.getCenter(type == CoordinateType.Screen ? CoordinateType.Projection : type, projection);\r\n        const point = geometry.getCenter(type == CoordinateType.Screen ? CoordinateType.Projection : type, projection);\r\n        if (type == CoordinateType.Screen) {\r\n            const matrix = ctx.getTransform();\r\n            const screenX1 = (matrix.a * center[0] + matrix.e), screenY1 = (matrix.d * center[1] + matrix.f);\r\n            const screenX2 = (matrix.a * point[0] + matrix.e), screenY2 = (matrix.d * point[1] + matrix.f);\r\n            return Math.sqrt((screenX2 - screenX1) * (screenX2 - screenX1) + (screenY2 - screenY1) * (screenY2 - screenY1));\r\n        }\r\n        else {\r\n            return Math.sqrt((point[0] - center[0]) * (point[0] - center[0]) + (point[1] - center[1]) * (point[1] - center[1]));\r\n        }\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { CoordinateType, Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleMarkerSymbol, SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//点\r\nexport class MultiplePoint extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._lnglats = lnglats;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((point) => this._projection.project(point));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(point => {\r\n            xmin = Math.min(xmin, point[0]);\r\n            ymin = Math.min(ymin, point[1]);\r\n            xmax = Math.max(xmax, point[0]);\r\n            ymax = Math.max(ymax, point[1]);\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._projected)\r\n                this.project(projection);\r\n            if (!extent.intersect(this._bound))\r\n                return;\r\n            const matrix = ctx.getTransform();\r\n            this._screen = [];\r\n            this._symbol = symbol;\r\n            if (symbol instanceof SimpleMarkerSymbol) {\r\n                const marker = symbol;\r\n                if (!marker.loaded)\r\n                    yield marker.load();\r\n            }\r\n            this._coordinates.forEach((point) => {\r\n                const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n                this._screen.push([screenX, screenY]);\r\n                if (symbol instanceof SimplePointSymbol) {\r\n                    ctx.save();\r\n                    ctx.strokeStyle = symbol.strokeStyle;\r\n                    ctx.fillStyle = symbol.fillStyle;\r\n                    ctx.lineWidth = symbol.lineWidth;\r\n                    ctx.beginPath(); //Start path\r\n                    //keep size\r\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                    ctx.arc(screenX, screenY, symbol.radius, 0, Math.PI * 2, true);\r\n                    ctx.fill();\r\n                    ctx.stroke();\r\n                    ctx.restore();\r\n                }\r\n                else if (symbol instanceof SimpleMarkerSymbol) {\r\n                    const marker = symbol;\r\n                    if (marker.icon) {\r\n                        ctx.save();\r\n                        const matrix = ctx.getTransform();\r\n                        //keep size\r\n                        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                        ctx.drawImage(marker.icon, screenX + marker.offsetX, screenY + marker.offsetY, marker.width, marker.height);\r\n                        ctx.restore();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    contain(screenX, screenY) {\r\n        return this._screen.some((point) => {\r\n            if (this._symbol instanceof SimplePointSymbol) {\r\n                return Math.sqrt((point[0] - screenX) * (point[0] - screenX) + (point[1] - screenY) * (point[1] - screenY)) <= this._symbol.radius;\r\n            }\r\n            else if (this._symbol instanceof SimpleMarkerSymbol) {\r\n                return screenX >= (point[0] - this._symbol.offsetX) && screenX <= (point[0] - this._symbol.offsetX + this._symbol.width) && screenY >= (point[1] - this._symbol.offsetY) && screenY <= (point[1] - this._symbol.offsetY + this._symbol.height);\r\n            }\r\n        });\r\n    }\r\n    //TODO: now return first point center\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (type = CoordinateType.Latlng) {\r\n            return [this._lnglats[0][0], this._lnglats[0][1]];\r\n        }\r\n        else {\r\n            return [this._coordinates[0][0], this._coordinates[0][1]];\r\n        }\r\n    }\r\n}\r\n//such as [[1,1],[2,2]]\r\n//interaction: hover && identify\r\nMultiplePoint.TOLERANCE = 0; //screen pixel\r\n","import { CoordinateType, Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleFillSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//面\r\nexport class MultiplePolygon extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._lnglats = lnglats;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((polygon) => polygon.map((ring) => ring.map((point) => this._projection.project(point))));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(polygon => {\r\n            polygon.forEach(ring => {\r\n                ring.forEach(point => {\r\n                    xmin = Math.min(xmin, point[0]);\r\n                    ymin = Math.min(ymin, point[1]);\r\n                    xmax = Math.max(xmax, point[0]);\r\n                    ymax = Math.max(ymax, point[1]);\r\n                });\r\n            });\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleFillSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.fillStyle = symbol.fillStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        const matrix = ctx.getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        //TODO:  ring is not supported\r\n        this._screen = [];\r\n        this._coordinates.forEach(polygon => {\r\n            const screen_polygon = [];\r\n            this._screen.push(screen_polygon);\r\n            ctx.beginPath();\r\n            polygon.forEach(ring => {\r\n                const screen_ring = [];\r\n                screen_polygon.push(screen_ring);\r\n                ring.forEach((point, index) => {\r\n                    const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n                    if (index === 0) {\r\n                        ctx.moveTo(screenX, screenY);\r\n                    }\r\n                    else {\r\n                        ctx.lineTo(screenX, screenY);\r\n                    }\r\n                    screen_ring.push([screenX, screenY]);\r\n                });\r\n            });\r\n            ctx.closePath();\r\n            ctx.fill(\"evenodd\");\r\n            ctx.stroke();\r\n        });\r\n        ctx.restore();\r\n    }\r\n    contain(screenX, screenY) {\r\n        //TODO: ring is not supported\r\n        return this._screen.some(polygon => this._pointInPolygon([screenX, screenY], polygon[0]));\r\n    }\r\n    //from https://github.com/substack/point-in-polygon\r\n    // ray-casting algorithm based on\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    _pointInPolygon(point, vs) {\r\n        let x = point[0], y = point[1];\r\n        let inside = false;\r\n        for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\r\n            let xi = vs[i][0], yi = vs[i][1];\r\n            let xj = vs[j][0], yj = vs[j][1];\r\n            let intersect = ((yi > y) != (yj > y))\r\n                && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n            if (intersect)\r\n                inside = !inside;\r\n        }\r\n        return inside;\r\n    }\r\n    ;\r\n    //from Leaflet\r\n    //TODO: now return first polygon center\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        let i, j, p1, p2, f, area, x, y, center, points = this._coordinates[0], len = points.length;\r\n        if (!len) {\r\n            return null;\r\n        }\r\n        // polygon centroid algorithm; only uses the first ring if there are multiple\r\n        area = x = y = 0;\r\n        for (i = 0, j = len - 1; i < len; j = i++) {\r\n            p1 = points[i];\r\n            p2 = points[j];\r\n            f = p1[1] * p2[0] - p2[1] * p1[0];\r\n            x += (p1[0] + p2[0]) * f;\r\n            y += (p1[1] + p2[1]) * f;\r\n            area += f * 3;\r\n        }\r\n        if (area === 0) {\r\n            // Polygon is so small that all points are on same pixel.\r\n            center = points[0];\r\n        }\r\n        else {\r\n            center = [x / area, y / area];\r\n        }\r\n        if (type = CoordinateType.Latlng) {\r\n            return projection.unproject(center);\r\n        }\r\n        else {\r\n            return center;\r\n        }\r\n    }\r\n}\r\n","import { CoordinateType, Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleLineSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//线\r\nexport class MultiplePolyline extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._tolerance = 4; //TOLERANCE + symbol.lineWidth\r\n        this._lnglats = lnglats;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((polyline) => polyline.map((point) => this._projection.project(point)));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(polyline => {\r\n            polyline.forEach(point => {\r\n                xmin = Math.min(xmin, point[0]);\r\n                ymin = Math.min(ymin, point[1]);\r\n                xmax = Math.max(xmax, point[0]);\r\n                ymax = Math.max(ymax, point[1]);\r\n            });\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleLineSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        this._tolerance = MultiplePolyline.TOLERANCE + symbol.lineWidth;\r\n        const matrix = ctx.getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        this._screen = [];\r\n        this._coordinates.forEach(polyline => {\r\n            ctx.beginPath();\r\n            const screen_polyline = [];\r\n            this._screen.push(screen_polyline);\r\n            polyline.forEach((point, index) => {\r\n                const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n                if (index === 0) {\r\n                    ctx.moveTo(screenX, screenY);\r\n                }\r\n                else {\r\n                    ctx.lineTo(screenX, screenY);\r\n                }\r\n                screen_polyline.push([screenX, screenY]);\r\n            });\r\n            ctx.stroke();\r\n        });\r\n        ctx.restore();\r\n    }\r\n    contain(screenX, screenY) {\r\n        let p2;\r\n        return this._screen.some(polyline => {\r\n            const distance = polyline.reduce((acc, cur) => {\r\n                if (p2) {\r\n                    const p1 = p2;\r\n                    p2 = cur;\r\n                    return Math.min(acc, this._distanceToSegment([screenX, screenY], p1, p2));\r\n                }\r\n                else {\r\n                    p2 = cur;\r\n                    return acc;\r\n                }\r\n            }, Number.MAX_VALUE);\r\n            return distance <= this._tolerance;\r\n        });\r\n    }\r\n    //from Leaflet\r\n    _distanceToSegment(p, p1, p2) {\r\n        let x = p1[0], y = p1[1], dx = p2[0] - x, dy = p2[1] - y, dot = dx * dx + dy * dy, t;\r\n        if (dot > 0) {\r\n            t = ((p[0] - x) * dx + (p[1] - y) * dy) / dot;\r\n            if (t > 1) {\r\n                x = p2[0];\r\n                y = p2[1];\r\n            }\r\n            else if (t > 0) {\r\n                x += dx * t;\r\n                y += dy * t;\r\n            }\r\n        }\r\n        dx = p[0] - x;\r\n        dy = p[1] - y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    //from Leaflet\r\n    //TODO: now return first polyline center\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        let i, halfDist, segDist, dist, p1, p2, ratio, points = this._coordinates[0], len = points.length;\r\n        if (!len) {\r\n            return null;\r\n        }\r\n        // polyline centroid algorithm; only uses the first ring if there are multiple\r\n        for (i = 0, halfDist = 0; i < len - 1; i++) {\r\n            halfDist += Math.sqrt((points[i + 1][0] - points[i][0]) * (points[i + 1][0] - points[i][0]) + (points[i + 1][1] - points[i][1]) * (points[i + 1][1] - points[i][1])) / 2;\r\n        }\r\n        let center;\r\n        // The line is so small in the current view that all points are on the same pixel.\r\n        if (halfDist === 0) {\r\n            center = points[0];\r\n        }\r\n        for (i = 0, dist = 0; i < len - 1; i++) {\r\n            p1 = points[i];\r\n            p2 = points[i + 1];\r\n            segDist = Math.sqrt((p2[0] - p1[0]) * (p2[0] - p1[0]) + (p2[1] - p1[1]) * (p2[1] - p1[1]));\r\n            dist += segDist;\r\n            if (dist > halfDist) {\r\n                ratio = (dist - halfDist) / segDist;\r\n                center = [\r\n                    p2[0] - ratio * (p2[0] - p1[0]),\r\n                    p2[1] - ratio * (p2[1] - p1[1])\r\n                ];\r\n            }\r\n        }\r\n        if (type = CoordinateType.Latlng) {\r\n            return projection.unproject(center);\r\n        }\r\n        else {\r\n            return center;\r\n        }\r\n    }\r\n}\r\n//[polyline[point[xy]]]\r\n//such as [[[1,1],[2,2]],[[3,3],[4,4]]]\r\n//interaction: hover && identify\r\nMultiplePolyline.TOLERANCE = 4; //screen pixel\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { CoordinateType, Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { ClusterSymbol, SimpleMarkerSymbol, SimplePointSymbol, VertexSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//点\r\nexport class Point extends Geometry {\r\n    constructor(lng, lat) {\r\n        super();\r\n        this._lng = lng;\r\n        this._lat = lat;\r\n    }\r\n    get lng() {\r\n        return this._lng;\r\n    }\r\n    get lat() {\r\n        return this._lat;\r\n    }\r\n    get x() {\r\n        return this._x;\r\n    }\r\n    get y() {\r\n        return this._y;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        [this._x, this._y] = this._projection.project([this._lng, this._lat]);\r\n        //TODO: bound tolerance\r\n        this._bound = new Bound(this._x, this._y, this._x, this._y);\r\n        this._projected = true;\r\n    }\r\n    move(ctx, projection, screenX, screenY) {\r\n        const matrix = ctx.getTransform();\r\n        this._screenX = screenX;\r\n        this._screenY = screenY;\r\n        this._x = (this._screenX - matrix.e) / matrix.a;\r\n        this._y = (this._screenY - matrix.f) / matrix.d;\r\n        this._bound = new Bound(this._x, this._y, this._x, this._y);\r\n        this._projection = projection;\r\n        [this._lng, this._lat] = this._projection.unproject([this._x, this._y]);\r\n        this._projected = true;\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimplePointSymbol()) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._projected)\r\n                this.project(projection);\r\n            if (!extent.intersect(this._bound))\r\n                return;\r\n            const matrix = ctx.getTransform();\r\n            this._screenX = (matrix.a * this._x + matrix.e);\r\n            this._screenY = (matrix.d * this._y + matrix.f);\r\n            this._symbol = symbol;\r\n            if (symbol instanceof SimplePointSymbol) {\r\n                ctx.save();\r\n                ctx.strokeStyle = symbol.strokeStyle;\r\n                ctx.fillStyle = symbol.fillStyle;\r\n                ctx.lineWidth = symbol.lineWidth;\r\n                ctx.beginPath(); //Start path\r\n                //keep size\r\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                ctx.arc(this._screenX, this._screenY, symbol.radius, 0, Math.PI * 2, true);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n                ctx.restore();\r\n            }\r\n            else if (symbol instanceof SimpleMarkerSymbol) {\r\n                const marker = symbol;\r\n                if (!marker.loaded)\r\n                    yield marker.load();\r\n                if (marker.icon) {\r\n                    ctx.save();\r\n                    const matrix = ctx.getTransform();\r\n                    //keep size\r\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                    ctx.drawImage(marker.icon, this._screenX + marker.offsetX, this._screenY + marker.offsetY, marker.width, marker.height);\r\n                    ctx.restore();\r\n                }\r\n            }\r\n            else if (symbol instanceof VertexSymbol) {\r\n                ctx.save();\r\n                ctx.strokeStyle = symbol.strokeStyle;\r\n                ctx.fillStyle = symbol.fillStyle;\r\n                ctx.lineWidth = symbol.lineWidth;\r\n                ctx.beginPath(); //Start path\r\n                //keep size\r\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                const size = symbol.size;\r\n                ctx.rect(this._screenX - size / 2, this._screenY - size / 2, size, size);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n                ctx.restore();\r\n            }\r\n            else if (symbol instanceof ClusterSymbol) {\r\n                const cluster = symbol;\r\n                ctx.save();\r\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                ctx.strokeStyle = cluster.strokeStyle;\r\n                ctx.fillStyle = cluster.outerFillStyle;\r\n                ctx.lineWidth = cluster.lineWidth;\r\n                ctx.beginPath(); //Start path\r\n                //keep size\r\n                ctx.arc(this._screenX, this._screenY, cluster.outer, 0, Math.PI * 2, true);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n                ctx.fillStyle = cluster.innerFillStyle;\r\n                ctx.beginPath(); //Start path\r\n                //keep size\r\n                ctx.arc(this._screenX, this._screenY, cluster.inner, 0, Math.PI * 2, true);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n                ctx.textBaseline = \"middle\";\r\n                ctx.textAlign = \"center\";\r\n                ctx.fillStyle = cluster.fontColor;\r\n                ctx.font = cluster.fontSize + \"px/1 \" + cluster.fontFamily + \" \" + cluster.fontWeight;\r\n                ctx.fillText(cluster.text, this._screenX, this._screenY);\r\n                ctx.restore();\r\n            }\r\n        });\r\n    }\r\n    ;\r\n    contain(screenX, screenY) {\r\n        if (this._symbol instanceof SimplePointSymbol) {\r\n            return Math.sqrt((this._screenX - screenX) * (this._screenX - screenX) + (this._screenY - screenY) * (this._screenY - screenY)) <= this._symbol.radius;\r\n        }\r\n        else if (this._symbol instanceof SimpleMarkerSymbol) {\r\n            return screenX >= (this._screenX - this._symbol.offsetX) && screenX <= (this._screenX - this._symbol.offsetX + this._symbol.width) && screenY >= (this._screenY - this._symbol.offsetY) && screenY <= (this._screenY - this._symbol.offsetY + this._symbol.height);\r\n        }\r\n        else if (this._symbol instanceof VertexSymbol) {\r\n            return screenX >= (this._screenX - this._symbol.size / 2) && screenX <= (this._screenX + this._symbol.size / 2) && screenY >= (this._screenY - this._symbol.size / 2) && screenY <= (this._screenY + this._symbol.size / 2);\r\n        }\r\n    }\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (type = CoordinateType.Latlng) {\r\n            return [this._lng, this._lat];\r\n        }\r\n        else {\r\n            return [this._x, this._y];\r\n        }\r\n    }\r\n}\r\n//interaction: hover && identify\r\nPoint.TOLERANCE = 0; //screen pixel\r\n","import { CoordinateType, Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleFillSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//面\r\nexport class Polygon extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._lnglats = lnglats;\r\n    }\r\n    get lnglats() {\r\n        return this._lnglats;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((ring) => ring.map((point) => this._projection.project(point)));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(ring => {\r\n            ring.forEach(point => {\r\n                xmin = Math.min(xmin, point[0]);\r\n                ymin = Math.min(ymin, point[1]);\r\n                xmax = Math.max(xmax, point[0]);\r\n                ymax = Math.max(ymax, point[1]);\r\n            });\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    splice(ctx, projection, lnglat, screenX = undefined, screenY = undefined, replaced = true) {\r\n        if (screenX == undefined && screenY == undefined) {\r\n            this._lnglats.forEach(ring => {\r\n                const index = ring.findIndex(point => point[0] == lnglat[0] && point[1] == lnglat[1]);\r\n                ring.length > 3 && index != -1 && ring.splice(index, 1);\r\n            });\r\n        }\r\n        else {\r\n            const matrix = ctx.getTransform();\r\n            const x = (screenX - matrix.e) / matrix.a;\r\n            const y = (screenY - matrix.f) / matrix.d;\r\n            this._projection = projection;\r\n            const [lng, lat] = this._projection.unproject([x, y]);\r\n            this._lnglats.forEach(ring => {\r\n                const index = ring.findIndex(point => point[0] == lnglat[0] && point[1] == lnglat[1]);\r\n                index != -1 && ring.splice(index, replaced ? 1 : 0, [lng, lat]);\r\n            });\r\n        }\r\n        this.project(projection);\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleFillSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.fillStyle = symbol.fillStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        const matrix = ctx.getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        this._screen = [];\r\n        ctx.beginPath();\r\n        this._coordinates.forEach(ring => {\r\n            const temp = [];\r\n            this._screen.push(temp);\r\n            ring.forEach((point, index) => {\r\n                const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n                if (index === 0) {\r\n                    ctx.moveTo(screenX, screenY);\r\n                }\r\n                else {\r\n                    ctx.lineTo(screenX, screenY);\r\n                }\r\n                temp.push([screenX, screenY]);\r\n            });\r\n        });\r\n        ctx.closePath();\r\n        ctx.fill(\"evenodd\");\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n    contain(screenX, screenY) {\r\n        const first = this._screen[0];\r\n        const others = this._screen.slice(1);\r\n        //first ring contained && others no contained\r\n        return this._pointInPolygon([screenX, screenY], first) && others.every(ring => !this._pointInPolygon([screenX, screenY], ring));\r\n        //return this._screen.some(ring => this._pointInPolygon([screenX, screenY], ring));\r\n    }\r\n    //from https://github.com/substack/point-in-polygon\r\n    // ray-casting algorithm based on\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    _pointInPolygon(point, vs) {\r\n        let x = point[0], y = point[1];\r\n        let inside = false;\r\n        for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\r\n            let xi = vs[i][0], yi = vs[i][1];\r\n            let xj = vs[j][0], yj = vs[j][1];\r\n            let intersect = ((yi > y) != (yj > y))\r\n                && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n            if (intersect)\r\n                inside = !inside;\r\n        }\r\n        return inside;\r\n    }\r\n    ;\r\n    //from Leaflet\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        let i, j, p1, p2, f, area, x, y, center, points = this._coordinates[0], len = points.length;\r\n        if (!len) {\r\n            return null;\r\n        }\r\n        // polygon centroid algorithm; only uses the first ring if there are multiple\r\n        area = x = y = 0;\r\n        for (i = 0, j = len - 1; i < len; j = i++) {\r\n            p1 = points[i];\r\n            p2 = points[j];\r\n            f = p1[1] * p2[0] - p2[1] * p1[0];\r\n            x += (p1[0] + p2[0]) * f;\r\n            y += (p1[1] + p2[1]) * f;\r\n            area += f * 3;\r\n        }\r\n        if (area === 0) {\r\n            // Polygon is so small that all points are on same pixel.\r\n            center = points[0];\r\n        }\r\n        else {\r\n            center = [x / area, y / area];\r\n        }\r\n        if (type = CoordinateType.Latlng) {\r\n            return projection.unproject(center);\r\n        }\r\n        else {\r\n            return center;\r\n        }\r\n    }\r\n}\r\n","import { CoordinateType, Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { ArrowSymbol, SimpleLineSymbol } from \"../symbol/symbol\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\n//线\r\nexport class Polyline extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._tolerance = 4; //TOLERANCE + symbol.lineWidth\r\n        this._lnglats = lnglats;\r\n    }\r\n    get lnglats() {\r\n        return this._lnglats;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((point) => this._projection.project(point));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(point => {\r\n            xmin = Math.min(xmin, point[0]);\r\n            ymin = Math.min(ymin, point[1]);\r\n            xmax = Math.max(xmax, point[0]);\r\n            ymax = Math.max(ymax, point[1]);\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    splice(ctx, projection, lnglat, screenX = undefined, screenY = undefined, replaced = true) {\r\n        if (screenX == undefined && screenY == undefined) {\r\n            const index = this._lnglats.findIndex(point => point[0] == lnglat[0] && point[1] == lnglat[1]);\r\n            this._lnglats.length > 2 && index != -1 && this._lnglats.splice(index, 1);\r\n        }\r\n        else {\r\n            const matrix = ctx.getTransform();\r\n            const x = (screenX - matrix.e) / matrix.a;\r\n            const y = (screenY - matrix.f) / matrix.d;\r\n            this._projection = projection;\r\n            const [lng, lat] = this._projection.unproject([x, y]);\r\n            const index = this._lnglats.findIndex(point => point[0] == lnglat[0] && point[1] == lnglat[1]);\r\n            index != -1 && this._lnglats.splice(index, replaced ? 1 : 0, [lng, lat]);\r\n        }\r\n        this.project(projection);\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, symbol = new SimpleLineSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        this._tolerance = Polyline.TOLERANCE + symbol.lineWidth;\r\n        const matrix = ctx.getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        this._screen = [];\r\n        ctx.beginPath();\r\n        this._coordinates.forEach((point, index) => {\r\n            const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n            if (index === 0) {\r\n                ctx.moveTo(screenX, screenY);\r\n            }\r\n            else {\r\n                ctx.lineTo(screenX, screenY);\r\n            }\r\n            this._screen.push([screenX, screenY]);\r\n        });\r\n        ctx.stroke();\r\n        if (symbol instanceof ArrowSymbol) {\r\n            const arrow = symbol;\r\n            this._screen.reduce((prev, cur) => {\r\n                if (prev) {\r\n                    const length = Math.sqrt((cur[0] - prev[0]) * (cur[0] - prev[0]) + (cur[1] - prev[1]) * (cur[1] - prev[1]));\r\n                    if (length >= arrow.minLength) {\r\n                        //中点 即箭头\r\n                        const [middleX, middleY] = [(prev[0] + cur[0]) / 2, (prev[1] + cur[1]) / 2];\r\n                        //箭尾垂线的垂足\r\n                        const [footX, footY] = this._getPointAlongLine([middleX, middleY], prev, Math.cos(arrow.arrowAngle) * arrow.arrowLength);\r\n                        const k = (cur[1] - prev[1]) / (cur[0] - prev[0]);\r\n                        // 1/k 垂线\r\n                        const points = this._getPointAlongLine2(-1 / k, footY - footX * -1 / k, [footX, footY], Math.sin(arrow.arrowAngle) * arrow.arrowLength);\r\n                        //两点\r\n                        points.forEach(point => {\r\n                            ctx.beginPath();\r\n                            ctx.moveTo(middleX, middleY);\r\n                            ctx.lineTo(point[0], point[1]);\r\n                            ctx.stroke();\r\n                        });\r\n                    }\r\n                    return cur;\r\n                }\r\n                else {\r\n                    return cur;\r\n                }\r\n            });\r\n        }\r\n        ctx.restore();\r\n    }\r\n    //已知 起点和终点  求沿线距起点定长的点\r\n    _getPointAlongLine(p1, p2, d) {\r\n        //line length\r\n        let l = Math.sqrt((p2[0] - p1[0]) * (p2[0] - p1[0]) + (p2[1] - p1[1]) * (p2[1] - p1[1]));\r\n        let t = d / l;\r\n        return [(1 - t) * p1[0] + t * p2[0], (1 - t) * p1[1] + t * p2[1]];\r\n    }\r\n    //已知 起点 y = kx + b   求沿线距起点定长的点 两个点\r\n    _getPointAlongLine2(k, b, p, d) {\r\n        let x0 = p[0] + Math.sqrt((d * d) / (k * k + 1)), x1 = p[0] - Math.sqrt((d * d) / (k * k + 1));\r\n        return [[x0, k * x0 + b], [x1, k * x1 + b]];\r\n    }\r\n    contain(screenX, screenY) {\r\n        let p2;\r\n        const distance = this._screen.reduce((acc, cur) => {\r\n            if (p2) {\r\n                const p1 = p2;\r\n                p2 = cur;\r\n                return Math.min(acc, this._distanceToSegment([screenX, screenY], p1, p2));\r\n            }\r\n            else {\r\n                p2 = cur;\r\n                return acc;\r\n            }\r\n        }, Number.MAX_VALUE);\r\n        return distance <= this._tolerance;\r\n    }\r\n    //from Leaflet\r\n    _distanceToSegment(p, p1, p2) {\r\n        let x = p1[0], y = p1[1], dx = p2[0] - x, dy = p2[1] - y, dot = dx * dx + dy * dy, t;\r\n        if (dot > 0) {\r\n            t = ((p[0] - x) * dx + (p[1] - y) * dy) / dot;\r\n            if (t > 1) {\r\n                x = p2[0];\r\n                y = p2[1];\r\n            }\r\n            else if (t > 0) {\r\n                x += dx * t;\r\n                y += dy * t;\r\n            }\r\n        }\r\n        dx = p[0] - x;\r\n        dy = p[1] - y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    //from Leaflet\r\n    getCenter(type = CoordinateType.Latlng, projection = new WebMercator()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        let i, halfDist, segDist, dist, p1, p2, ratio, points = this._coordinates, len = points.length;\r\n        if (!len) {\r\n            return null;\r\n        }\r\n        // polyline centroid algorithm; only uses the first ring if there are multiple\r\n        for (i = 0, halfDist = 0; i < len - 1; i++) {\r\n            halfDist += Math.sqrt((points[i + 1][0] - points[i][0]) * (points[i + 1][0] - points[i][0]) + (points[i + 1][1] - points[i][1]) * (points[i + 1][1] - points[i][1])) / 2;\r\n        }\r\n        let center;\r\n        // The line is so small in the current view that all points are on the same pixel.\r\n        if (halfDist === 0) {\r\n            center = points[0];\r\n        }\r\n        for (i = 0, dist = 0; i < len - 1; i++) {\r\n            p1 = points[i];\r\n            p2 = points[i + 1];\r\n            segDist = Math.sqrt((p2[0] - p1[0]) * (p2[0] - p1[0]) + (p2[1] - p1[1]) * (p2[1] - p1[1]));\r\n            dist += segDist;\r\n            if (dist > halfDist) {\r\n                ratio = (dist - halfDist) / segDist;\r\n                center = [\r\n                    p2[0] - ratio * (p2[0] - p1[0]),\r\n                    p2[1] - ratio * (p2[1] - p1[1])\r\n                ];\r\n            }\r\n        }\r\n        if (type = CoordinateType.Latlng) {\r\n            return projection.unproject(center);\r\n        }\r\n        else {\r\n            return center;\r\n        }\r\n    }\r\n}\r\n//[point[xy]]\r\n//such as [[1,1],[2,2]]\r\n//interaction: hover && identify\r\nPolyline.TOLERANCE = 4; //screen pixel\r\n","export * from './map';\r\nexport * from './viewer';\r\nexport * from './entity';\r\nexport * from './data/feature-class';\r\nexport * from './data/field';\r\nexport * from './editor/editor';\r\nexport * from './element/graphic';\r\nexport * from './element/feature';\r\nexport * from './geometry/geometry';\r\nexport * from './geometry/point';\r\nexport * from './geometry/polyline';\r\nexport * from './geometry/polygon';\r\nexport * from './geometry/multiple-point';\r\nexport * from './geometry/multiple-polyline';\r\nexport * from './geometry/multiple-polygon';\r\nexport * from './layer/layer';\r\nexport * from './layer/graphic-layer';\r\nexport * from './layer/feature-layer';\r\nexport * from './label/label';\r\nexport * from './tooltip/tooltip';\r\nexport * from './symbol/symbol';\r\nexport * from './renderer/renderer';\r\nexport * from './renderer/simple-renderer';\r\nexport * from './renderer/category-renderer';\r\nexport * from './renderer/class-renderer';\r\nexport * from './projection/projection';\r\nexport * from './projection/web-mercator';\r\nexport * from './projection/bd09';\r\nexport * from './projection/gcj02';\r\nexport * from './util/utility';\r\nexport * from './util/bound';\r\nexport * from './util/color';\r\nexport * from './util/subject';\r\n","export class Label {\r\n}\r\n","import { Layer } from \"./layer\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\nimport { SimpleRenderer } from \"../renderer/simple-renderer\";\r\nimport { CategoryRenderer } from \"../renderer/category-renderer\";\r\nimport { ClassRenderer } from \"../renderer/class-renderer\";\r\nimport { GeometryType, CoordinateType } from \"../geometry/geometry\";\r\nimport { Point } from \"../geometry/point\";\r\nimport { ClusterSymbol } from \"../symbol/symbol\";\r\nexport class FeatureLayer extends Layer {\r\n    constructor() {\r\n        super(...arguments);\r\n        //是否显示标注\r\n        this.labeled = false;\r\n        //是否聚合\r\n        this.cluster = false;\r\n        //是否正在编辑\r\n        this.editing = false;\r\n        this._zoom = [3, 20];\r\n        this._interactive = true;\r\n    }\r\n    get interactive() {\r\n        return this._interactive;\r\n    }\r\n    set interactive(value) {\r\n        this._interactive = value;\r\n    }\r\n    set featureClass(value) {\r\n        this._featureClass = value;\r\n    }\r\n    set label(value) {\r\n        this._label = value;\r\n    }\r\n    set renderer(value) {\r\n        this._renderer = value;\r\n    }\r\n    set zoom(value) {\r\n        this._zoom = value;\r\n    }\r\n    //地图事件注册监听\r\n    on(event, handler) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.on(event, handler);\r\n        });\r\n    }\r\n    off(event, handler) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.off(event, handler);\r\n        });\r\n    }\r\n    emit(event, param) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.emit(event, param);\r\n        });\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) {\r\n        if (this.visible && this._zoom[0] <= zoom && this._zoom[1] >= zoom) {\r\n            const features = this._featureClass.features.filter((feature) => feature.intersect(projection, extent));\r\n            if (this._featureClass.type == GeometryType.Point && this.cluster) {\r\n                const cluster = features.reduce((acc, cur) => {\r\n                    if (cur.geometry instanceof Point) {\r\n                        const point = cur.geometry;\r\n                        const item = acc.find((item) => {\r\n                            const distance = point.distance(item.feature.geometry, CoordinateType.Screen, ctx, projection);\r\n                            return distance <= 50;\r\n                        });\r\n                        if (item) {\r\n                            item.count += 1;\r\n                        }\r\n                        else {\r\n                            acc.push({ feature: cur, count: 1 });\r\n                        }\r\n                        return acc;\r\n                    }\r\n                }, []); // {feature, count}\r\n                cluster.forEach((item) => {\r\n                    if (item.count == 1) {\r\n                        item.feature.draw(ctx, projection, extent, this._getSymbol(item.feature));\r\n                    }\r\n                    else {\r\n                        item.feature.draw(ctx, projection, extent, new ClusterSymbol(item.count));\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                features.forEach((feature) => {\r\n                    feature.draw(ctx, projection, extent, this._getSymbol(feature));\r\n                });\r\n            }\r\n        }\r\n    }\r\n    drawLabel(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) {\r\n        if (this.visible && !this.cluster && this._zoom[0] <= zoom && this._zoom[1] >= zoom) {\r\n            const features = this._featureClass.features.filter((feature) => feature.intersect(projection, extent));\r\n            /*features.forEach( feature => {\r\n                feature.label(this._label.field, ctx, projection, extent, this._label.symbol);\r\n            });*/\r\n            const cluster = features.reduce((acc, cur) => {\r\n                const item = acc.find((item) => {\r\n                    const distance = cur.geometry.distance(item.feature.geometry, CoordinateType.Screen, ctx, projection);\r\n                    return distance <= 50;\r\n                });\r\n                if (item) {\r\n                    item.count += 1;\r\n                }\r\n                else {\r\n                    acc.push({ feature: cur, count: 1 });\r\n                }\r\n                return acc;\r\n            }, []); // {feature, count}\r\n            cluster.forEach((item) => {\r\n                item.feature.label(this._label.field, ctx, projection, extent, this._label.symbol);\r\n            });\r\n        }\r\n    }\r\n    contain(screenX, screenY, projection = new WebMercator(), extent = projection.bound, zoom = 10, event = undefined) {\r\n        if (this.visible && this._zoom[0] <= zoom && this._zoom[1] >= zoom) {\r\n            //if call Array.some, maybe abort mouseout last feature which mouseover!!! but filter maybe cause slow!!!no choice\r\n            //return this._featureClass.features.filter((feature: Feature) => feature.intersect(projection, extent)).some( (feature: Feature) => {\r\n            const features = this._featureClass.features.filter((feature) => feature.intersect(projection, extent)).filter((feature) => {\r\n                return feature.contain(screenX, screenY, event);\r\n            });\r\n            if (features.length > 0) {\r\n                if (event == \"dblclick\") {\r\n                    features[0].emit(\"dblclick\", { feature: features[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                else if (event == \"click\") {\r\n                    features[0].emit(\"click\", { feature: features[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    _getSymbol(feature) {\r\n        if (this._renderer instanceof SimpleRenderer) {\r\n            return this._renderer.symbol;\r\n        }\r\n        else if (this._renderer instanceof CategoryRenderer) {\r\n            const renderer = this._renderer;\r\n            const item = renderer.items.find(item => item.value == feature.properties[renderer.field.name]);\r\n            return item === null || item === void 0 ? void 0 : item.symbol;\r\n        }\r\n        else if (this._renderer instanceof ClassRenderer) {\r\n            const renderer = this._renderer;\r\n            const item = renderer.items.find(item => item.low <= feature.properties[renderer.field.name] && item.high >= feature.properties[renderer.field.name]);\r\n            return item === null || item === void 0 ? void 0 : item.symbol;\r\n        }\r\n    }\r\n}\r\n","import { Layer } from \"./layer\";\r\nimport { WebMercator } from \"../projection/web-mercator\";\r\nexport class GraphicLayer extends Layer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._graphics = [];\r\n    }\r\n    //地图事件注册监听\r\n    on(event, handler) {\r\n        this._graphics.forEach((graphic) => {\r\n            graphic.on(event, handler);\r\n        });\r\n    }\r\n    off(event, handler) {\r\n        this._graphics.forEach((graphic) => {\r\n            graphic.off(event, handler);\r\n        });\r\n    }\r\n    emit(event, param) {\r\n        this._graphics.forEach((graphic) => {\r\n            graphic.emit(event, param);\r\n        });\r\n    }\r\n    add(graphic) {\r\n        this._graphics.push(graphic);\r\n    }\r\n    remove(graphic) {\r\n        const index = this._graphics.findIndex(item => item === graphic);\r\n        index != -1 && this._graphics.splice(index, 1);\r\n    }\r\n    clear() {\r\n        this._graphics = [];\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) {\r\n        if (this.visible) {\r\n            this._graphics.forEach((graphic) => {\r\n                graphic.draw(ctx, projection, extent);\r\n            });\r\n        }\r\n    }\r\n    contain(screenX, screenY, projection = new WebMercator(), extent = projection.bound, zoom = 10, event = undefined) {\r\n        if (this.visible) {\r\n            const graphics = this._graphics.filter((graphic) => graphic.intersect(projection, extent)).filter((graphic) => {\r\n                return graphic.contain(screenX, screenY, event);\r\n            });\r\n            if (graphics.length > 0) {\r\n                if (event == \"dblclick\") {\r\n                    graphics[0].emit(\"dblclick\", { graphic: graphics[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                else if (event == \"click\") {\r\n                    graphics[0].emit(\"click\", { graphic: graphics[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                else if (event == \"dragstart\") {\r\n                    graphics[0].emit(\"dragstart\", { graphic: graphics[0], screenX: screenX, screenY: screenY });\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { WebMercator } from \"../projection/web-mercator\";\r\nexport class Layer {\r\n    constructor() {\r\n        this._visible = true;\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    set visible(value) {\r\n        this._visible = value;\r\n    }\r\n    draw(ctx, projection = new WebMercator(), extent = projection.bound, zoom = 10) { }\r\n    ;\r\n}\r\n","import { CoordinateType } from \"./geometry/geometry\";\r\nimport { Bound } from \"./util/bound\";\r\nimport { WebMercator } from \"./projection/web-mercator\";\r\nimport { GraphicLayer } from \"./layer/graphic-layer\";\r\nimport { Utility } from \"./util/utility\";\r\nimport { Editor } from \"./editor/editor\";\r\nimport { Viewer } from \"./viewer\";\r\nimport { Subject } from \"./util/subject\";\r\nimport { Tooltip } from \"./tooltip/tooltip\";\r\nexport class Map extends Subject {\r\n    constructor(id) {\r\n        super([\"extent\", \"click\", \"mousemove\", \"resize\"]);\r\n        this._drag = {\r\n            flag: false,\r\n            start: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            end: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        //地图缩放等级\r\n        this._zoom = 1;\r\n        //地图视图中心\r\n        this._center = [0, 0];\r\n        //默认图形图层\r\n        this._defaultGraphicLayer = new GraphicLayer();\r\n        this._container = document.getElementById(id);\r\n        //create canvas\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this._canvas.style.cssText = \"position: absolute; height: 100%; width: 100%; z-index: 100\";\r\n        this._canvas.width = this._container.clientWidth;\r\n        this._canvas.height = this._container.clientHeight;\r\n        this._container.appendChild(this._canvas);\r\n        this._onClick = this._onClick.bind(this);\r\n        this._onDoubleClick = this._onDoubleClick.bind(this);\r\n        this._onMouseDown = this._onMouseDown.bind(this);\r\n        this._onMouseMove = this._onMouseMove.bind(this);\r\n        this._onMouseUp = this._onMouseUp.bind(this);\r\n        this._onWheel = this._onWheel.bind(this);\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n        this._canvas.addEventListener(\"click\", this._onClick);\r\n        this._canvas.addEventListener(\"dblclick\", this._onDoubleClick);\r\n        this._canvas.addEventListener(\"mousedown\", this._onMouseDown);\r\n        this._canvas.addEventListener(\"mousemove\", this._onMouseMove);\r\n        this._canvas.addEventListener(\"mouseup\", this._onMouseUp);\r\n        this._canvas.addEventListener(\"wheel\", this._onWheel);\r\n        //viewer\r\n        this._viewer = new Viewer(this);\r\n        this._viewer.on(\"mouseover\", () => { Utility.addClass(this._canvas, \"green-hover\"); });\r\n        this._viewer.on(\"mouseout\", () => { Utility.removeClass(this._canvas, \"green-hover\"); });\r\n        //editor\r\n        this._editor = new Editor(this);\r\n        this._editor.on(\"mouseover\", () => { Utility.addClass(this._canvas, \"green-hover\"); });\r\n        this._editor.on(\"mouseout\", () => { Utility.removeClass(this._canvas, \"green-hover\"); });\r\n        this._editor.on(\"startedit\", () => { this._viewer.redraw(); });\r\n        this._editor.on(\"stopedit\", () => { this._viewer.redraw(); });\r\n        //tooltip\r\n        this._tooltip = new Tooltip(this);\r\n        this._projection = new WebMercator();\r\n        this._center = [0, 0];\r\n        this._zoom = 10;\r\n        //Latlng [-180, 180] [-90, 90]\r\n        //this._ctx.setTransform(256/180 * Math.pow(2, this._zoom - 1), 0, 0, -256/90 * Math.pow(2, this._zoom - 1), this._canvas.width/2, this._canvas.height/2);\r\n        const bound = this._projection.bound;\r\n        //设置初始矩阵，由于地图切片是256*256，Math.pow(2, this._zoom)代表在一定缩放级别下x与y轴的切片数量\r\n        this._ctx.setTransform(256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale, 0, 0, 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale, this._canvas.width / 2, this._canvas.height / 2);\r\n        this._onResize = this._onResize.bind(this);\r\n        window.addEventListener(\"resize\", this._onResize);\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get viewer() {\r\n        return this._viewer;\r\n    }\r\n    get editor() {\r\n        return this._editor;\r\n    }\r\n    set editor(value) {\r\n        this._editor = value;\r\n    }\r\n    get center() {\r\n        return this._center;\r\n    }\r\n    get extent() {\r\n        return this._extent;\r\n    }\r\n    get zoom() {\r\n        return this._zoom;\r\n    }\r\n    get projection() {\r\n        return this._projection;\r\n    }\r\n    //设置投影\r\n    setProjection(projection) {\r\n        this._projection = projection;\r\n        const bound = this._projection.bound;\r\n        this._ctx.setTransform(256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale, 0, 0, 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale, this._canvas.width / 2, this._canvas.height / 2);\r\n    }\r\n    //设置视图级别及视图中心\r\n    setView(center = [0, 0], zoom = 3) {\r\n        this._center = center;\r\n        this._zoom = Math.max(3, Math.min(20, zoom));\r\n        //center为经纬度，转化为平面坐标\r\n        const origin = this._projection.project(center);\r\n        const bound = this._projection.bound;\r\n        //已知：matrix 转换前 坐标origin，转换后坐标 即canvas的中心 [this._canvas.width / 2, this._canvas.height / 2]\r\n        //求：转换矩阵\r\n        //解法如下：\r\n        const a = 256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale;\r\n        const d = 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale;\r\n        const e = this._canvas.width / 2 - a * origin[0];\r\n        const f = this._canvas.height / 2 - d * origin[1];\r\n        this._ctx.setTransform(a, 0, 0, d, e, f);\r\n        this.redraw();\r\n    }\r\n    //viewer\r\n    addLayer(layer) {\r\n        this._viewer.addLayer(layer);\r\n    }\r\n    insertLayer(layer, index = -1) {\r\n        this._viewer.insertLayer(layer, index);\r\n    }\r\n    removeLayer(layer) {\r\n        this._viewer.removeLayer(layer);\r\n    }\r\n    clearLayers() {\r\n        this._viewer.clear();\r\n    }\r\n    //shortcut\r\n    addGraphic(graphic) {\r\n        this._defaultGraphicLayer.add(graphic);\r\n        graphic.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    removeGraphic(graphic) {\r\n        this._defaultGraphicLayer.remove(graphic);\r\n        this._defaultGraphicLayer.draw(this._ctx, this._projection, this._extent, this._zoom);\r\n    }\r\n    clearGraphics() {\r\n        this._defaultGraphicLayer.clear();\r\n        this._defaultGraphicLayer.draw(this._ctx, this._projection, this._extent, this._zoom);\r\n    }\r\n    //更新地图视图范围以及中心点\r\n    updateExtent() {\r\n        const matrix = this._ctx.getTransform();\r\n        const x1 = (0 - matrix.e) / matrix.a, y1 = (0 - matrix.f) / matrix.d, x2 = (this._canvas.width - matrix.e) / matrix.a, y2 = (this._canvas.height - matrix.f) / matrix.d;\r\n        this._extent = new Bound(Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2));\r\n        this._center = this._projection.unproject([(x1 + x2) / 2, (y1 + y2) / 2]);\r\n        this._handlers[\"extent\"].forEach(handler => handler({ extent: this._extent, center: this._center, zoom: this._zoom, matrix: matrix }));\r\n    }\r\n    redraw() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n        this.updateExtent();\r\n        this._defaultGraphicLayer.draw(this._ctx, this._projection, this._extent, this._zoom);\r\n        this.hideTooltip();\r\n    }\r\n    clear() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n        this.updateExtent();\r\n    }\r\n    _onResize(event) {\r\n        this._canvas.width = this._container.clientWidth;\r\n        this._canvas.height = this._container.clientHeight;\r\n        this._handlers[\"resize\"].forEach(handler => handler(event));\r\n        this.setView(this._center, this._zoom);\r\n    }\r\n    _onClick(event) {\r\n        if (this._editor && this._editor.editing) {\r\n            this._editor._onClick(event);\r\n            return;\r\n        }\r\n        this._handlers[\"click\"].forEach(handler => handler(event));\r\n    }\r\n    _onDoubleClick(event) {\r\n        if (this._editor && this._editor.editing) {\r\n            this._editor._onDoubleClick(event);\r\n            return;\r\n        }\r\n        if (this._zoom >= 20)\r\n            return;\r\n        const scale = 2;\r\n        this._zoom += 1;\r\n        const matrix = this._ctx.getTransform();\r\n        const a1 = matrix.a, e1 = matrix.e, x1 = event.offsetX, x2 = x1; //放大到中心点 x2 = this._canvas.width / 2\r\n        const e = (x2 - scale * (x1 - e1) - e1) / a1;\r\n        const d1 = matrix.d, f1 = matrix.f, y1 = event.offsetY, y2 = y1; //放大到中心点 y2 = this._canvas.height / 2\r\n        const f = (y2 - scale * (y1 - f1) - f1) / d1;\r\n        this._ctx.transform(scale, 0, 0, scale, e, f);\r\n        this.redraw();\r\n    }\r\n    _onMouseDown(event) {\r\n        if (this._editor && this._editor.editing) {\r\n            this._editor._onMouseDown(event);\r\n            return;\r\n        }\r\n        this._drag.flag = true;\r\n        this._drag.start.x = event.x;\r\n        this._drag.start.y = event.y;\r\n    }\r\n    _onMouseMove(event) {\r\n        if (this._editor && this._editor.editing) {\r\n            this._editor._onMouseMove(event);\r\n            return;\r\n        }\r\n        if (!this._drag.flag) {\r\n            this._handlers[\"mousemove\"].forEach(handler => handler(event));\r\n        }\r\n    }\r\n    _onMouseUp(event) {\r\n        if (this._editor && this._editor.editing) {\r\n            this._editor._onMouseUp(event);\r\n            return;\r\n        }\r\n        if (this._drag.flag) {\r\n            this._drag.end.x = event.x;\r\n            this._drag.end.y = event.y;\r\n            const matrix = this._ctx.getTransform();\r\n            this._ctx.translate((this._drag.end.x - this._drag.start.x) / matrix.a, (this._drag.end.y - this._drag.start.y) / matrix.d);\r\n            this.redraw();\r\n        }\r\n        this._drag.flag = false;\r\n    }\r\n    _onWheel(event) {\r\n        let scale = 1;\r\n        const sensitivity = 100;\r\n        const delta = event.deltaY / sensitivity;\r\n        if (delta < 0) {\r\n            if (this._zoom >= 20)\r\n                return;\r\n            // 放大\r\n            scale *= delta * -2;\r\n        }\r\n        else {\r\n            // 缩小\r\n            if (this._zoom <= 3)\r\n                return;\r\n            scale /= delta * 2;\r\n        }\r\n        const zoom = Math.round(Math.log(scale));\r\n        scale = Math.pow(2, zoom);\r\n        this._zoom += zoom;\r\n        //交互表现为 鼠标当前位置 屏幕坐标不变 进行缩放 即x2 = x1\r\n        //第一种方案，坐标系不变，变坐标值\r\n        //1.将原屏幕坐标 x1 转成 初始坐标 x0 = (x1 - e1) / a1  初始矩阵 (1,0,0,1,0,0)\r\n        //2.初始坐标x0 转成 现屏幕坐标x2  a2 * x0 + e2 = x2    e2 = x2 - a2 * x0  代入1式 e2 = x2 - a2 * (x1 - e1) / a1\r\n        //3.已知scale = a2 / a1  故 e2 = x2 - scale * (x1 - e1)\r\n        //4.另矩阵变换 a1 * e + e1 = e2\r\n        //5.联立3和4  求得 e = (x2 - scale * (x1 - e1) - e1) / a1\r\n        const matrix = this._ctx.getTransform();\r\n        const a1 = matrix.a, e1 = matrix.e, x1 = event.x, x2 = x1; //放大到中心点 x2 = this._canvas.width / 2\r\n        const e = (x2 - scale * (x1 - e1) - e1) / a1;\r\n        const d1 = matrix.d, f1 = matrix.f, y1 = event.y, y2 = y1; //放大到中心点 y2 = this._canvas.height / 2\r\n        const f = (y2 - scale * (y1 - f1) - f1) / d1;\r\n        this._ctx.transform(scale, 0, 0, scale, e, f);\r\n        this.redraw();\r\n    }\r\n    //show tooltip\r\n    showTooltip(feature, field) {\r\n        const text = feature.properties[field.name];\r\n        const center = feature.geometry.getCenter(CoordinateType.Projection, this.projection);\r\n        const matrix = this._ctx.getTransform();\r\n        const screenX = (matrix.a * center[0] + matrix.e);\r\n        const screenY = (matrix.d * center[1] + matrix.f);\r\n        this._tooltip.show(text, screenX, screenY);\r\n    }\r\n    hideTooltip() {\r\n        this._tooltip.hide();\r\n    }\r\n    destroy() {\r\n        window.removeEventListener(\"resize\", this._onResize);\r\n        this._canvas.removeEventListener(\"click\", this._onClick);\r\n        this._canvas.removeEventListener(\"dblclick\", this._onDoubleClick);\r\n        this._canvas.removeEventListener(\"mousedown\", this._onMouseDown);\r\n        this._canvas.removeEventListener(\"mousemove\", this._onMouseMove);\r\n        this._canvas.removeEventListener(\"mouseup\", this._onMouseUp);\r\n        this._canvas.removeEventListener(\"wheel\", this._onWheel);\r\n        this._viewer = null;\r\n        this._editor = null;\r\n    }\r\n}\r\n","import { Bound } from \"../util/bound\";\r\nimport { LatLngType, Projection } from \"./projection\";\r\nimport { GCJ02 } from \"./gcj02\";\r\n//just for china\r\nexport class BD09 extends Projection {\r\n    constructor(type = LatLngType.GPS) {\r\n        super();\r\n        this._type = type;\r\n    }\r\n    //投影后的平面坐标范围\r\n    get bound() {\r\n        return new Bound(-BD09.TOTAL_PIXELS / 2, BD09.TOTAL_PIXELS / 2, BD09.TOTAL_PIXELS / 2, -BD09.TOTAL_PIXELS / 2);\r\n    }\r\n    //经纬度转平面坐标\r\n    project([lng, lat]) {\r\n        //from leaflet & wiki\r\n        if (this._type == LatLngType.GPS) {\r\n            [lng, lat] = GCJ02.wgs84togcj02(lng, lat);\r\n            [lng, lat] = BD09.gcj02tobd09(lng, lat);\r\n        }\r\n        else if (this._type == LatLngType.GCJ02) {\r\n            [lng, lat] = BD09.gcj02tobd09(lng, lat);\r\n        }\r\n        const projection = new BMap.MercatorProjection();\r\n        const pixel = projection.lngLatToPoint(new BMap.Point(lng, lat));\r\n        return [pixel.x, pixel.y];\r\n        /*const d = Math.PI / 180, sin = Math.sin(lat * d);\r\n        return [WebMercator.R * lng * d,  WebMercator.R * Math.log((1 + sin) / (1 - sin)) / 2];*/\r\n    }\r\n    //平面坐标转经纬度\r\n    unproject([x, y]) {\r\n        const projection = new BMap.MercatorProjection();\r\n        const point = projection.pointToLngLat(new BMap.Pixel(x, y));\r\n        return [point.lng, point.lat];\r\n        /*const d = 180 / Math.PI;\r\n        return  [x * d / WebMercator.R, (2 * Math.atan(Math.exp(y / WebMercator.R)) - (Math.PI / 2)) * d];*/\r\n    }\r\n    //from https://github.com/wandergis/coordtransform\r\n    /**\r\n     * 百度坐标系 (BD-09) 与 火星坐标系 (GCJ-02) 的转换\r\n     * 即 百度 转 谷歌、高德\r\n     * @param bd_lng\r\n     * @param bd_lat\r\n     * @returns {*[]}\r\n     */\r\n    static bd09togcj02(bd_lng, bd_lat) {\r\n        var x = bd_lng - 0.0065;\r\n        var y = bd_lat - 0.006;\r\n        var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * Math.PI * 3000.0 / 180.0);\r\n        var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * Math.PI * 3000.0 / 180.0);\r\n        var gg_lng = z * Math.cos(theta);\r\n        var gg_lat = z * Math.sin(theta);\r\n        return [gg_lng, gg_lat];\r\n    }\r\n    ;\r\n    /**\r\n     * 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换\r\n     * 即 谷歌、高德 转 百度\r\n     * @param lng\r\n     * @param lat\r\n     * @returns {*[]}\r\n     */\r\n    static gcj02tobd09(lng, lat) {\r\n        var z = Math.sqrt(lng * lng + lat * lat) + 0.00002 * Math.sin(lat * Math.PI * 3000.0 / 180.0);\r\n        var theta = Math.atan2(lat, lng) + 0.000003 * Math.cos(lng * Math.PI * 3000.0 / 180.0);\r\n        var bd_lng = z * Math.cos(theta) + 0.0065;\r\n        var bd_lat = z * Math.sin(theta) + 0.006;\r\n        return [bd_lng, bd_lat];\r\n    }\r\n    ;\r\n}\r\n//百度平面坐标系的坐标原点与百度瓦片坐标原点相同，以瓦片等级18级为基准，规定18级时百度平面坐标的一个单位等于屏幕上的一个像素\r\nBD09.TOTAL_PIXELS = 256 * Math.pow(2, 18);\r\n","import { Bound } from \"../util/bound\";\r\nimport { LatLngType, Projection } from \"./projection\";\r\n//just for china\r\nexport class GCJ02 extends Projection {\r\n    constructor(type = LatLngType.GPS) {\r\n        super();\r\n        this._type = type;\r\n    }\r\n    //投影后的平面坐标范围\r\n    get bound() {\r\n        return new Bound(-Math.PI * GCJ02.R, Math.PI * GCJ02.R, Math.PI * GCJ02.R, -Math.PI * GCJ02.R);\r\n    }\r\n    //经纬度转平面坐标\r\n    project([lng, lat]) {\r\n        if (this._type == LatLngType.GPS) {\r\n            [lng, lat] = GCJ02.wgs84togcj02(lng, lat);\r\n        }\r\n        //from leaflet & wiki\r\n        const d = Math.PI / 180, sin = Math.sin(lat * d);\r\n        return [GCJ02.R * lng * d, GCJ02.R * Math.log((1 + sin) / (1 - sin)) / 2];\r\n    }\r\n    //平面坐标转经纬度\r\n    unproject([x, y]) {\r\n        const d = 180 / Math.PI;\r\n        return [x * d / GCJ02.R, (2 * Math.atan(Math.exp(y / GCJ02.R)) - (Math.PI / 2)) * d];\r\n    }\r\n    //from https://github.com/wandergis/coordtransform\r\n    /**\r\n     * WGS-84 转 GCJ-02\r\n     * @param lng\r\n     * @param lat\r\n     * @returns {*[]}\r\n     */\r\n    static wgs84togcj02(lng, lat) {\r\n        var dlat = this._transformlat(lng - 105.0, lat - 35.0);\r\n        var dlng = this._transformlng(lng - 105.0, lat - 35.0);\r\n        var radlat = lat / 180.0 * Math.PI;\r\n        var magic = Math.sin(radlat);\r\n        magic = 1 - GCJ02.ee * magic * magic;\r\n        var sqrtmagic = Math.sqrt(magic);\r\n        dlat = (dlat * 180.0) / ((GCJ02.R * (1 - GCJ02.ee)) / (magic * sqrtmagic) * Math.PI);\r\n        dlng = (dlng * 180.0) / (GCJ02.R / sqrtmagic * Math.cos(radlat) * Math.PI);\r\n        var mglat = lat + dlat;\r\n        var mglng = lng + dlng;\r\n        return [mglng, mglat];\r\n    }\r\n    ;\r\n    /**\r\n     * GCJ-02 转换为 WGS-84\r\n     * @param lng\r\n     * @param lat\r\n     * @returns {*[]}\r\n     */\r\n    static gcj02towgs84(lng, lat) {\r\n        var dlat = this._transformlat(lng - 105.0, lat - 35.0);\r\n        var dlng = this._transformlng(lng - 105.0, lat - 35.0);\r\n        var radlat = lat / 180.0 * Math.PI;\r\n        var magic = Math.sin(radlat);\r\n        magic = 1 - GCJ02.ee * magic * magic;\r\n        var sqrtmagic = Math.sqrt(magic);\r\n        dlat = (dlat * 180.0) / ((GCJ02.R * (1 - GCJ02.ee)) / (magic * sqrtmagic) * Math.PI);\r\n        dlng = (dlng * 180.0) / (GCJ02.R / sqrtmagic * Math.cos(radlat) * Math.PI);\r\n        var mglat = lat + dlat;\r\n        var mglng = lng + dlng;\r\n        return [lng * 2 - mglng, lat * 2 - mglat];\r\n    }\r\n    ;\r\n    static _transformlat(lng, lat) {\r\n        var ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng));\r\n        ret += (20.0 * Math.sin(6.0 * lng * Math.PI) + 20.0 * Math.sin(2.0 * lng * Math.PI)) * 2.0 / 3.0;\r\n        ret += (20.0 * Math.sin(lat * Math.PI) + 40.0 * Math.sin(lat / 3.0 * Math.PI)) * 2.0 / 3.0;\r\n        ret += (160.0 * Math.sin(lat / 12.0 * Math.PI) + 320 * Math.sin(lat * Math.PI / 30.0)) * 2.0 / 3.0;\r\n        return ret;\r\n    }\r\n    ;\r\n    static _transformlng(lng, lat) {\r\n        var ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng));\r\n        ret += (20.0 * Math.sin(6.0 * lng * Math.PI) + 20.0 * Math.sin(2.0 * lng * Math.PI)) * 2.0 / 3.0;\r\n        ret += (20.0 * Math.sin(lng * Math.PI) + 40.0 * Math.sin(lng / 3.0 * Math.PI)) * 2.0 / 3.0;\r\n        ret += (150.0 * Math.sin(lng / 12.0 * Math.PI) + 300.0 * Math.sin(lng / 30.0 * Math.PI)) * 2.0 / 3.0;\r\n        return ret;\r\n    }\r\n    ;\r\n    //此判断欠妥，暂不采用！\r\n    /**\r\n     * 判断是否在国内，不在国内则不做偏移\r\n     * @param lng\r\n     * @param lat\r\n     * @returns {boolean}\r\n     */\r\n    static out_of_china(lng, lat) {\r\n        // 纬度 3.86~53.55, 经度 73.66~135.05\r\n        return !(lng > 73.66 && lng < 135.05 && lat > 3.86 && lat < 53.55);\r\n    }\r\n    ;\r\n}\r\nGCJ02.R = 6378137.0;\r\nGCJ02.ee = 0.00669342162296594323;\r\n","export var LatLngType;\r\n(function (LatLngType) {\r\n    LatLngType[LatLngType[\"GPS\"] = 0] = \"GPS\";\r\n    LatLngType[LatLngType[\"GCJ02\"] = 1] = \"GCJ02\";\r\n    LatLngType[LatLngType[\"BD09\"] = 2] = \"BD09\"; //Just For China, BaiduMap\r\n})(LatLngType || (LatLngType = {}));\r\n//TODO: only support web mecator\r\nexport class Projection {\r\n    //经纬度转平面坐标\r\n    project([lng, lat]) { return []; }\r\n    ;\r\n    //平面坐标转经纬度\r\n    unproject([x, y]) { return []; }\r\n    ;\r\n    //投影后的平面坐标范围\r\n    get bound() { return null; }\r\n    ;\r\n}\r\n","import { Bound } from \"../util/bound\";\r\nimport { Projection } from \"./projection\";\r\nexport class WebMercator extends Projection {\r\n    //投影后的平面坐标范围\r\n    get bound() {\r\n        return new Bound(-Math.PI * WebMercator.R, Math.PI * WebMercator.R, Math.PI * WebMercator.R, -Math.PI * WebMercator.R);\r\n    }\r\n    //经纬度转平面坐标\r\n    project([lng, lat]) {\r\n        //from leaflet & wiki\r\n        const d = Math.PI / 180, sin = Math.sin(lat * d);\r\n        return [WebMercator.R * lng * d, WebMercator.R * Math.log((1 + sin) / (1 - sin)) / 2];\r\n    }\r\n    //平面坐标转经纬度\r\n    unproject([x, y]) {\r\n        const d = 180 / Math.PI;\r\n        return [x * d / WebMercator.R, (2 * Math.atan(Math.exp(y / WebMercator.R)) - (Math.PI / 2)) * d];\r\n    }\r\n}\r\nWebMercator.R = 6378137;\r\n","import { SimpleFillSymbol, SimpleLineSymbol, SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { GeometryType } from \"../geometry/geometry\";\r\nimport { Color } from \"../util/color\";\r\nexport class CategoryRendererItem {\r\n    constructor() {\r\n        this.count = 1;\r\n    }\r\n}\r\nexport class CategoryRenderer {\r\n    constructor() {\r\n        this._items = [];\r\n    }\r\n    get field() {\r\n        return this._field;\r\n    }\r\n    get items() {\r\n        return this._items;\r\n    }\r\n    generate(featureClass, field) {\r\n        this._field = field;\r\n        this._items = [];\r\n        featureClass.features.map(feature => feature.properties[field.name]).forEach((value) => {\r\n            const item = this._items.find(item => item.value == value);\r\n            if (item) {\r\n                item.count += 1;\r\n            }\r\n            else {\r\n                const item = new CategoryRendererItem();\r\n                switch (featureClass.type) {\r\n                    case GeometryType.Point:\r\n                        const symbol1 = new SimplePointSymbol();\r\n                        symbol1.fillStyle = Color.random().toString();\r\n                        symbol1.strokeStyle = Color.random().toString();\r\n                        item.symbol = symbol1;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                    case GeometryType.Polyline:\r\n                        const symbol2 = new SimpleLineSymbol();\r\n                        symbol2.strokeStyle = Color.random().toString();\r\n                        item.symbol = symbol2;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                    case GeometryType.Polygon:\r\n                        const symbol3 = new SimpleFillSymbol();\r\n                        symbol3.fillStyle = Color.random().toString();\r\n                        symbol3.strokeStyle = Color.random().toString();\r\n                        item.symbol = symbol3;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","export class ClassRendererItem {\r\n}\r\nexport class ClassRenderer {\r\n    constructor() {\r\n        this._items = [];\r\n    }\r\n    get field() {\r\n        return this._field;\r\n    }\r\n    get items() {\r\n        return this._items;\r\n    }\r\n    generate(featureClass, field, breaks) {\r\n        this._field = field;\r\n        this._items = [];\r\n        //TODO auto class break\r\n    }\r\n}\r\n","export class Renderer {\r\n}\r\n","export class SimpleRenderer {\r\n}\r\n","import { Color } from \"../util/color\";\r\nexport class Symbol {\r\n}\r\nexport class SimplePointSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        //circle\r\n        this.radius = 10;\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n        this.fillStyle = \"#ff0000\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleLineSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleFillSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lineWidth = 2;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n        this.fillStyle = \"#ff0000\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleMarkerSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.width = 16;\r\n        this.height = 16;\r\n        this.offsetX = 8;\r\n        this.offsetY = 8;\r\n    }\r\n    get loaded() {\r\n        return this._loaded;\r\n    }\r\n    load() {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.onload = () => {\r\n                createImageBitmap(img).then(icon => {\r\n                    this.icon = icon;\r\n                    this._loaded = true;\r\n                    resolve(icon);\r\n                }, err => reject(err));\r\n            };\r\n            img.onerror = reject;\r\n            img.src = this.url;\r\n        });\r\n    }\r\n}\r\nexport class SimpleTextSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lineWidth = 3;\r\n        this.strokeStyle = \"#ff0000\"; //#ffffff\r\n        this.fillStyle = \"#ffffff\"; //#ffffff\r\n        this.offsetX = 0;\r\n        this.offsetY = 1;\r\n        this.padding = 5;\r\n        this.fontColor = \"#ff0000\";\r\n        this.fontSize = 12;\r\n        this.fontFamily = \"YaHei\";\r\n        this.fontWeight = \"Bold\";\r\n    }\r\n}\r\nexport class ArrowSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lineWidth = 2;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n        this.minLength = 50; //>50pixel will draw arrow\r\n        this.arrowLength = 10;\r\n        this.arrowAngle = Math.PI / 6; //angle 30\r\n    }\r\n}\r\nexport class VertexSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.size = 10;\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n        this.fillStyle = \"#ff000088\"; //#ff0000\r\n    }\r\n}\r\nexport class ClusterSymbol extends Symbol {\r\n    constructor(count) {\r\n        super();\r\n        this._count = 2;\r\n        this.radius = 10;\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ffffff\"; //#ff0000\r\n        this.outerFillStyle = \"#ffffff\"; //#ff0000\r\n        this.fontColor = \"#ffffff\";\r\n        this.fontFamily = \"YaHei\";\r\n        this.fontWeight = \"Bold\";\r\n        this._count = count;\r\n    }\r\n    get text() {\r\n        return this._count <= 99 ? this._count.toString() : \"99+\";\r\n    }\r\n    get inner() {\r\n        return this._count <= 15 ? this.radius + this._count : this.radius + 15;\r\n    }\r\n    get outer() {\r\n        return this.inner + 4;\r\n    }\r\n    get fontSize() {\r\n        if (this._count < 10) {\r\n            return 12;\r\n        }\r\n        else if (this._count >= 10 && this._count < 30) {\r\n            return 14;\r\n        }\r\n        else if (this._count >= 30 && this._count < 50) {\r\n            return 16;\r\n        }\r\n        else if (this._count >= 30 && this._count < 50) {\r\n            return 18;\r\n        }\r\n        else if (this._count > 50) {\r\n            return 20;\r\n        }\r\n    }\r\n    get innerFillStyle() {\r\n        const colors = Color.ramp(new Color(0, 255, 0), new Color(255, 0, 0), 16);\r\n        return colors[this._count <= 15 ? this._count : 15].toString();\r\n    }\r\n}\r\n","import { Utility } from \"../util/utility\";\r\nexport class Tooltip {\r\n    constructor(map) {\r\n        this._map = map;\r\n        const container = this._map.container;\r\n        this._tooltipContainer = document.createElement(\"div\");\r\n        Utility.addClass(this._tooltipContainer, \"green-tooltip\");\r\n        Utility.addClass(this._tooltipContainer, \"green-tooltip-placement-top\");\r\n        container.appendChild(this._tooltipContainer);\r\n        this._tooltipArrow = document.createElement(\"div\");\r\n        Utility.addClass(this._tooltipArrow, \"green-tooltip-arrow\");\r\n        Utility.addClass(this._tooltipArrow, \"green-tooltip-arrow-placement-top\");\r\n        this._tooltipContainer.appendChild(this._tooltipArrow);\r\n        this._tooltipText = document.createElement(\"div\");\r\n        Utility.addClass(this._tooltipText, \"green-tooltip-text\");\r\n        this._tooltipContainer.appendChild(this._tooltipText);\r\n    }\r\n    show(text, screenX, screenY) {\r\n        this._tooltipText.innerHTML = text;\r\n        //this._tooltip.style.cssText = \"display: block; left: \" + (screenX - this._tooltip.offsetWidth / 2) + \"px; top: \" + (screenY - this._tooltip.offsetHeight) + \"px;\";\r\n        this._tooltipContainer.style.cssText = \"display: block; left: \" + (screenX) + \"px; top: \" + (screenY) + \"px;\";\r\n    }\r\n    hide() {\r\n        this._tooltipContainer.style.cssText = \"display: none\";\r\n    }\r\n}\r\n","export class Bound {\r\n    constructor(xmin, ymin, xmax, ymax) {\r\n        //+1代表 x方向为自西向东，-1则反之\r\n        this._xscale = 1;\r\n        //+1代表 y方向为自北向南，-1则反之\r\n        this._yscale = 1;\r\n        this._xmin = Math.min(xmin, xmax);\r\n        this._ymin = Math.min(ymin, ymax);\r\n        this._xmax = Math.max(xmin, xmax);\r\n        this._ymax = Math.max(ymin, ymax);\r\n        this._xscale = xmin <= xmax ? 1 : -1;\r\n        this._yscale = ymin <= ymax ? 1 : -1;\r\n    }\r\n    get xmin() {\r\n        return this._xmin;\r\n    }\r\n    get ymin() {\r\n        return this._ymin;\r\n    }\r\n    get xmax() {\r\n        return this._xmax;\r\n    }\r\n    get ymax() {\r\n        return this._ymax;\r\n    }\r\n    get xscale() {\r\n        return this._xscale;\r\n    }\r\n    get yscale() {\r\n        return this._yscale;\r\n    }\r\n    //是否交叉叠盖\r\n    intersect(bound) {\r\n        return (bound.xmax >= this._xmin) && (bound.xmin <= this._xmax) && (bound.ymax >= this._ymin) && (bound.ymin <= this._ymax);\r\n    }\r\n}\r\n","export class Color {\r\n    constructor(r, g, b, a = 1) {\r\n        this.a = 1;\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n    toString() {\r\n        return \"rgba(\" + this.r + \",\" + this.g + \",\" + this.b + \",\" + this.a + \")\";\r\n    }\r\n    static fromHex(hex) {\r\n        let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/;\r\n        hex = hex.toLowerCase();\r\n        if (hex && reg.test(hex)) {\r\n            //处理三位的颜色值\r\n            if (hex.length === 4) {\r\n                var sColorNew = \"#\";\r\n                for (var i = 1; i < 4; i += 1) {\r\n                    sColorNew += hex.slice(i, i + 1).concat(hex.slice(i, i + 1));\r\n                }\r\n                hex = sColorNew;\r\n            }\r\n            //处理六位的颜色值\r\n            if (hex.length === 4) {\r\n                hex += \"ff\";\r\n            }\r\n            let sColorChange = [];\r\n            for (let i = 1; i < 9; i += 2) {\r\n                sColorChange.push(parseInt(\"0x\" + hex.slice(i, i + 2)));\r\n            }\r\n            return new Color(sColorChange[0], sColorChange[1], sColorChange[2], sColorChange[3] / 255);\r\n        }\r\n    }\r\n    static ramp(start, end, count = 10) {\r\n        const colors = [];\r\n        for (let i = 0; i < count; i += 1) {\r\n            colors.push(new Color((end.r - start.r) * i / count + start.r, (end.g - start.g) * i / count + start.g, (end.b - start.b) * i / count + start.b, (end.a - start.a) * i / count + start.a));\r\n        }\r\n        return colors;\r\n    }\r\n    static random() {\r\n        return new Color(Math.random() * 255, Math.random() * 255, Math.random() * 255);\r\n    }\r\n}\r\n","export class Subject {\r\n    constructor(events) {\r\n        this._handlers = {};\r\n        events.forEach(event => {\r\n            this._handlers[event] = []; //handlers array\r\n        });\r\n    }\r\n    //地图事件注册监听\r\n    on(event, handler) {\r\n        this._handlers[event].push(handler);\r\n    }\r\n    off(event, handler) {\r\n        if (Array.isArray(this._handlers[event])) {\r\n            const index = this._handlers[event].findIndex(item => item === handler);\r\n            index != -1 && this._handlers[event].splice(index, 1);\r\n        }\r\n    }\r\n    emit(event, param) {\r\n        this._handlers[event].forEach(handler => handler(param));\r\n    }\r\n}\r\n","export class Utility {\r\n    // @function addClass(el: HTMLElement, name: String)\r\n    // Adds `name` to the element's class attribute.\r\n    static addClass(el, name) {\r\n        if (el.classList !== undefined) {\r\n            el.classList.add(name);\r\n        }\r\n        else if (!Utility.hasClass(el, name)) {\r\n            var className = Utility.getClass(el);\r\n            Utility.setClass(el, (className ? className + ' ' : '') + name);\r\n        }\r\n    }\r\n    // @function removeClass(el: HTMLElement, name: String)\r\n    // Removes `name` from the element's class attribute.\r\n    static removeClass(el, name) {\r\n        if (el.classList !== undefined) {\r\n            el.classList.remove(name);\r\n        }\r\n        else {\r\n            Utility.setClass(el, (' ' + Utility.getClass(el) + ' ').replace(' ' + name + ' ', ' ').trim());\r\n        }\r\n    }\r\n    // @function hasClass(el: HTMLElement, name: String): Boolean\r\n    // Returns `true` if the element's class attribute contains `name`.\r\n    static hasClass(el, name) {\r\n        if (el.classList !== undefined) {\r\n            return el.classList.contains(name);\r\n        }\r\n        var className = Utility.getClass(el);\r\n        return className.length > 0 && new RegExp('(^|\\\\s)' + name + '(\\\\s|$)').test(className);\r\n    }\r\n    // @function setClass(el: HTMLElement, name: String)\r\n    // Sets the element's class.\r\n    static setClass(el, name) {\r\n        if (el.className.baseVal === undefined) {\r\n            el.className = name;\r\n        }\r\n        else {\r\n            // in case of SVG element\r\n            el.className.baseVal = name;\r\n        }\r\n    }\r\n    // @function getClass(el: HTMLElement): String\r\n    // Returns the element's class.\r\n    static getClass(el) {\r\n        // Check if the element is an SVGElementInstance and use the correspondingElement instead\r\n        // (Required for linked SVG elements in IE11.)\r\n        if (el.correspondingElement) {\r\n            el = el.correspondingElement;\r\n        }\r\n        return el.className.baseVal === undefined ? el.className : el.className.baseVal;\r\n    }\r\n}\r\n","import { Subject } from \"./util/subject\";\r\nexport class Viewer extends Subject {\r\n    constructor(map) {\r\n        super([\"mouseover\", \"mouseout\"]); //when mouseover feature\r\n        this._drag = {\r\n            flag: false,\r\n            start: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            end: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        //图层列表\r\n        this._layers = [];\r\n        this._map = map;\r\n        const container = map.container;\r\n        //create canvas\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this._canvas.style.cssText = \"position: absolute; height: 100%; width: 100%;\";\r\n        this._canvas.width = container.clientWidth;\r\n        this._canvas.height = container.clientHeight;\r\n        container.appendChild(this._canvas);\r\n        this._onResize = this._onResize.bind(this);\r\n        this._extentChange = this._extentChange.bind(this);\r\n        this._onClick = this._onClick.bind(this);\r\n        this._onMouseMove = this._onMouseMove.bind(this);\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n        this._map.on(\"resize\", this._onResize);\r\n        this._map.on(\"extent\", this._extentChange);\r\n        this._map.on(\"click\", this._onClick);\r\n        this._map.on(\"mousemove\", this._onMouseMove);\r\n    }\r\n    _onResize(event) {\r\n        this._canvas.width = this._map.container.clientWidth;\r\n        this._canvas.height = this._map.container.clientHeight;\r\n    }\r\n    _extentChange(event) {\r\n        this._ctx.setTransform(event.matrix.a, 0, 0, event.matrix.d, event.matrix.e, event.matrix.f);\r\n        this.redraw();\r\n    }\r\n    _onClick(event) {\r\n        this._layers.filter(layer => layer.interactive && !layer.editing).some((layer) => layer.contain(event.offsetX, event.offsetY, this._map.projection, this._map.extent, this._map.zoom, \"click\"));\r\n    }\r\n    _onMouseMove(event) {\r\n        //if call Array.some, maybe abort mouseout last feature which mouseover!!! but filter maybe cause slow!!!no choice\r\n        //const flag = this._layers.filter(layer => (layer instanceof FeatureLayer) && layer.interactive).some((layer: FeatureLayer) => layer.contain(event.offsetX, event.offsetY, this._projection, this._extent, \"mousemove\"));\r\n        const layers = this._layers.filter(layer => layer.interactive && !layer.editing).filter((layer) => layer.contain(event.offsetX, event.offsetY, this._map.projection, this._map.extent, this._map.zoom, \"mousemove\"));\r\n        if (layers.length > 0) {\r\n            this.emit(\"mouseover\", event);\r\n        }\r\n        else {\r\n            this.emit(\"mouseout\", event);\r\n        }\r\n    }\r\n    addLayer(layer) {\r\n        this._layers.push(layer);\r\n        layer.draw(this._ctx, this._map.projection, this._map.extent, this._map.zoom);\r\n    }\r\n    insertLayer(layer, index = -1) {\r\n        index = index > this._layers.length ? -1 : index;\r\n        if (index == -1) {\r\n            this.addLayer(layer);\r\n        }\r\n        else {\r\n            this._layers.splice(index, 0, layer);\r\n            this.redraw();\r\n        }\r\n    }\r\n    removeLayer(layer) {\r\n        const index = this._layers.findIndex(item => item === layer);\r\n        index != -1 && this._layers.splice(index, 1);\r\n        this.redraw();\r\n    }\r\n    clearLayers() {\r\n        this._layers = [];\r\n        this.redraw();\r\n    }\r\n    redraw() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n        this._layers.filter(layer => !layer.editing).forEach(layer => {\r\n            layer.draw(this._ctx, this._map.projection, this._map.extent, this._map.zoom);\r\n        });\r\n        this._layers.filter(layer => layer.labeled && !layer.editing).forEach((layer) => {\r\n            layer.drawLabel(this._ctx, this._map.projection, this._map.extent, this._map.zoom);\r\n        });\r\n    }\r\n    clear() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this._ctx.restore();\r\n    }\r\n    destroy() {\r\n        this._map.off(\"resize\", this._onResize);\r\n        this._map.off(\"extent\", this._extentChange);\r\n        this._map.off(\"click\", this._onClick);\r\n        this._map.off(\"mousemove\", this._onMouseMove);\r\n    }\r\n}\r\n","import {\r\n    Map,\r\n    GCJ02, LatLngType,\r\n    Point,\r\n    Polyline,\r\n    SimpleFillSymbol,\r\n    FeatureClass,\r\n    FeatureLayer,\r\n    SimpleRenderer,\r\n    CategoryRenderer,\r\n    CategoryRendererItem,\r\n    Field, Label, Tooltip,\r\n    FieldType,\r\n    Graphic, SimpleMarkerSymbol, Feature, SimpleTextSymbol, ArrowSymbol\r\n} from \"../dist\";\r\n\r\nwindow.load = () => {\r\n    const amap = new AMap.Map(\"amap\", {\r\n        fadeOnZoom: false,\r\n        navigationMode: 'classic',\r\n        optimizePanAnimation: false,\r\n        animateEnable: false,\r\n        dragEnable: false,\r\n        zoomEnable: false,\r\n        resizeEnable: true,\r\n        doubleClickZoom: false,\r\n        keyboardEnable: false,\r\n        scrollWheel: false,\r\n        expandZoomRange: true,\r\n        zooms: [1, 20],\r\n        mapStyle: 'normal',\r\n        features: ['road', 'point', 'bg'],\r\n        viewMode: '2D'\r\n    });\r\n\r\n    const map = new Map(\"foo\");\r\n    map.on(\"extent\", (event) => {\r\n        amap.setZoomAndCenter(event.zoom, event.center);\r\n        document.getElementById(\"x\").value = Math.round(event.center[0] * 1000)/1000;\r\n        document.getElementById(\"y\").value = Math.round(event.center[1] * 1000)/1000;\r\n        document.getElementById(\"zoom\").value = event.zoom;\r\n        document.getElementById(\"x1\").value = Math.round(event.extent.xmin * 1000)/1000;\r\n        document.getElementById(\"y1\").value = Math.round(event.extent.ymin * 1000)/1000;\r\n        document.getElementById(\"x2\").value = Math.round(event.extent.xmax * 1000)/1000;\r\n        document.getElementById(\"y2\").value = Math.round(event.extent.ymax * 1000)/1000;\r\n        document.getElementById(\"a\").value = Math.round(event.matrix.a * 1000)/1000;\r\n        document.getElementById(\"d\").value = Math.round(event.matrix.d * 1000)/1000;\r\n        document.getElementById(\"e\").value = Math.round(event.matrix.e * 1000)/1000;\r\n        document.getElementById(\"f\").value = Math.round(event.matrix.f * 1000)/1000;\r\n    });\r\n\r\n    var req = new XMLHttpRequest();\r\n    req.onload = (event) => {\r\n        const featureClass = new FeatureClass();\r\n        featureClass.loadGeoJSON(JSON.parse(req.responseText));\r\n        const featureLayer = new FeatureLayer();\r\n        featureLayer.featureClass = featureClass;\r\n        const renderer = new SimpleRenderer();\r\n        featureLayer.cluster = true;\r\n        featureLayer.renderer = renderer;\r\n        featureLayer.zoom = [13, 20];\r\n        map.addLayer(featureLayer);\r\n\r\n        map.setView([109.519, 18.271], 13);\r\n    };\r\n    req.open(\"GET\", \"assets/geojson/junction.json\", true);\r\n    req.send(null);\r\n\r\n    map.setProjection(new GCJ02(LatLngType.GCJ02));\r\n\r\n}\r\n"],"sourceRoot":""}