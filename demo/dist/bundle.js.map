{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../dist/data/feature-class.js","webpack:///../dist/data/field.js","webpack:///../dist/element/feature.js","webpack:///../dist/element/graphic.js","webpack:///../dist/entity.js","webpack:///../dist/geometry/geometry.js","webpack:///../dist/geometry/point.js","webpack:///../dist/geometry/polygon.js","webpack:///../dist/geometry/polyline.js","webpack:///../dist/index.js","webpack:///../dist/layer/feature-layer.js","webpack:///../dist/layer/graphic-layer.js","webpack:///../dist/layer/layer.js","webpack:///../dist/map.js","webpack:///../dist/projection/projection.js","webpack:///../dist/projection/web-mecator.js","webpack:///../dist/renderer/category-renderer.js","webpack:///../dist/renderer/class-renderer.js","webpack:///../dist/renderer/renderer.js","webpack:///../dist/renderer/simple-renderer.js","webpack:///../dist/symbol/symbol.js","webpack:///../dist/util/bound.js","webpack:///../dist/util/color-generator.js","webpack:///../dist/util/utility.js","webpack:///./main-03.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACO;AACV;AACM;AACF;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,+DAAY;AAC7C,sCAAsC,qDAAK;AAC3C,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,yCAAyC,2DAAQ;AACjD,4CAA4C,wDAAO;AACnD;AACA;AACA,iCAAiC,+DAAY;AAC7C,wCAAwC,yDAAO;AAC/C,4CAA4C,wDAAO;AACnD;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAqD;AACE;AAChD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAU,4CAA4C,gEAAiB;AACtG;AACA;AACA;AACA,+BAA+B,kEAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,oDAAoD;AAC3H;AACA;AACA,sEAAsE,oDAAoD;AAC1H;AACA;AACA;AACA;AACA,mEAAmE,oDAAoD;AACvH;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAuD;AAChD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAU;AACzC;AACA;AACA;AACA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACE;AAChD;AACP;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AAC9B;AACP;AACA;AACA;AACA,yBAAyB;AACzB;AACA,+BAA+B,kEAAU,4CAA4C,gEAAiB,KAAK;AAC3G;AACA,+BAA+B,cAAc;AAC7C,+BAA+B,kEAAU;AACzC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACsC;AACA;AACmC;AAClB;AACvD;AACO,oBAAoB,kDAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAK;AAC/B;AACA;AACA,+BAA+B,kEAAU,4CAA4C,gEAAiB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gEAAiB;AACnD;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iEAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oCAAoC,gEAAiB;AACrD;AACA;AACA,yCAAyC,iEAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;;;;;;AC3EpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACA;AACc;AACG;AACvD;AACO,sBAAsB,kDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA,+BAA+B,kEAAU,4CAA4C,+DAAgB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,eAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACA;AACc;AACG;AACvD;AACO,uBAAuB,kDAAQ;AACtC;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,iDAAK;AAC/B;AACA,+BAA+B,kEAAU,4CAA4C,+DAAgB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;;;;;;ACvFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB;AACG;AACY;AACR;AACK;AACA;AACE;AACH;AACG;AACD;AACL;AACQ;AACA;AACN;AACI;AACO;AACE;AACH;AACF;AACC;AACV;AACF;AACU;;;;;;;;;;;;;ACtBvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACuB;AACM;AACI;AACN;AACpD,2BAA2B,4CAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,kEAAU;AACzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+CAA+C,kEAAU;AACzD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sCAAsC,wEAAc;AACpD;AACA;AACA,2CAA2C,4EAAgB;AAC3D;AACA;AACA;AACA;AACA,2CAA2C,sEAAa;AACxD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAgC;AACuB;AAChD,2BAA2B,4CAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAU;AACzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAuD;AAChD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAU,2CAA2C;AACpF;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACiB;AACD;AACA;AACZ;AAClC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iEAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAK;AAChC;AACA,wDAAwD,+EAA+E;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,iEAAY;AAChF;AACA,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,iEAAY;AACpF;AACA,gBAAgB,qDAAO;AACvB;AACA;AACA,gBAAgB,qDAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtOA;AAAA;AAAA;AACO;AACP;AACA,yBAAyB,WAAW;AACpC;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAsC;AAC/B;AACP;AACA;AACA,mBAAmB,iDAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyF;AACrC;AACK;AAClD;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,gEAAiB;AAC7D,4CAA4C,oEAAc;AAC1D,8CAA8C,oEAAc;AAC5D;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,+DAAgB;AAC5D,8CAA8C,oEAAc;AAC5D;AACA;AACA;AACA;AACA,yBAAyB,+DAAY;AACrC,4CAA4C,+DAAgB;AAC5D,4CAA4C,oEAAc;AAC1D,8CAA8C,oEAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAO;AACP;;;;;;;;;;;;;ACDA;AAAA;AAAO;AACP;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,mCAAmC;AACnC;AACA;AACO;AACP;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACO;AACP;AACA;AACA;AACA,qCAAqC;AACrC,mCAAmC;AACnC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACpDA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnCA;AAAA;AAAO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpDA;AAAA;AAaiB;;AAEjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,yCAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,iCAAiC,kDAAY;AAC7C;AACA,iCAAiC,kDAAY;AAC7C;AACA,0BAA0B,2CAAK;AAC/B;AACA,qBAAqB,+CAAS;AAC9B,6BAA6B,sDAAgB;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA,sBAAsB,2CAAK;AAC3B,wBAAwB,6CAAO,UAAU;AACzC,6BAA6B,kDAAY;AACzC;AACA,uBAAuB,wDAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAY;AACzC;AACA,yBAAyB,oDAAc;AACvC;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./main-03.js\");\n","import { Feature } from \"../element/feature\";\r\nimport { GeometryType } from \"../geometry/geometry\";\r\nimport { Point } from \"../geometry/point\";\r\nimport { Polyline } from \"../geometry/polyline\";\r\nimport { Polygon } from \"../geometry/polygon\";\r\nexport class FeatureClass {\r\n    constructor() {\r\n        this._fields = [];\r\n        this._features = [];\r\n    }\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    get features() {\r\n        return this._features;\r\n    }\r\n    get fields() {\r\n        return this._fields;\r\n    }\r\n    addFeature(feature) {\r\n        this._features.push(feature);\r\n    }\r\n    removeFeature(feature) {\r\n        const index = this._features.findIndex(item => item === feature);\r\n        index != -1 && this._features.splice(index, 1);\r\n    }\r\n    clearFeatures() {\r\n        this._features = [];\r\n    }\r\n    addField(field) {\r\n        this._fields.push(field);\r\n    }\r\n    removeField(field) {\r\n        const index = this._fields.findIndex(item => item === field);\r\n        index != -1 && this._fields.splice(index, 1);\r\n    }\r\n    clearFields() {\r\n        this._fields = [];\r\n    }\r\n    //TODO: multiple point line polygon is not supported\r\n    loadGeoJSON(data) {\r\n        Array.isArray(data.features) && data.features.forEach(item => {\r\n            switch (item.geometry.type) {\r\n                case \"Point\":\r\n                    //TODO: ridiculous\r\n                    this._type = GeometryType.Point;\r\n                    const point = new Point(item.geometry.coordinates[0], item.geometry.coordinates[1]);\r\n                    this._features.push(new Feature(point, item.properties));\r\n                    break;\r\n                case \"LineString\":\r\n                    this._type = GeometryType.Polyline;\r\n                    const polyline = new Polyline(item.geometry.coordinates);\r\n                    this._features.push(new Feature(polyline, item.properties));\r\n                    break;\r\n                case \"Polygon\":\r\n                    this._type = GeometryType.Polygon;\r\n                    const polygon = new Polygon(item.geometry.coordinates);\r\n                    this._features.push(new Feature(polygon, item.properties));\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n","export var FieldType;\r\n(function (FieldType) {\r\n    FieldType[FieldType[\"String\"] = 0] = \"String\";\r\n    FieldType[FieldType[\"Number\"] = 1] = \"Number\";\r\n})(FieldType || (FieldType = {}));\r\nexport class Field {\r\n}\r\n","import { SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { WebMecator } from \"../projection/web-mecator\";\r\nexport class Feature {\r\n    constructor(geometry, properties) {\r\n        //要素事件的handlers\r\n        this._events = {\r\n            \"click\": [],\r\n            \"mouseover\": [],\r\n            \"mouseout\": [] //鼠标退出\r\n        };\r\n        this.visible = true;\r\n        this._geometry = geometry;\r\n        this._properties = properties;\r\n    }\r\n    get properties() {\r\n        return this._properties;\r\n    }\r\n    get bound() {\r\n        return this._geometry ? this._geometry.bound : null;\r\n    }\r\n    //地图事件注册监听\r\n    on(event, handler) {\r\n        this._events[event].push(handler);\r\n    }\r\n    off(event, handler) {\r\n        if (Array.isArray(this._events[event])) {\r\n            const index = this._events[event].findIndex(item => item === handler);\r\n            index != -1 && this._events[event].splice(index, 1);\r\n        }\r\n    }\r\n    emit(event, param) {\r\n        this._events[event].forEach(handler => handler(param));\r\n    }\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound, symbol = new SimplePointSymbol()) {\r\n        if (this.visible)\r\n            this._geometry.draw(ctx, projection, extent, symbol);\r\n    }\r\n    intersect(projection = new WebMecator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            return this._geometry.intersect(projection, extent);\r\n    }\r\n    contain(screenX, screenY, event = undefined) {\r\n        if (this.visible) {\r\n            const flag = this._geometry.contain(screenX, screenY);\r\n            if (event == \"mousemove\") {\r\n                if (!this._contained && flag) {\r\n                    this._events.mouseover.forEach(handler => handler({ feature: this, screenX: screenX, screenY: screenY }));\r\n                }\r\n                else if (this._contained && !flag) {\r\n                    this._events.mouseout.forEach(handler => handler({ feature: this, screenX: screenX, screenY: screenY }));\r\n                }\r\n            }\r\n            else if (event == \"click\") {\r\n                if (flag)\r\n                    this._events.click.forEach(handler => handler({ feature: this, screenX: screenX, screenY: screenY }));\r\n            }\r\n            this._contained = flag;\r\n            return flag;\r\n        }\r\n    }\r\n}\r\n","import { WebMecator } from \"../projection/web-mecator\";\r\nexport class Graphic {\r\n    constructor(geometry, symbol) {\r\n        this.visible = true;\r\n        this._geometry = geometry;\r\n        this._symbol = symbol;\r\n    }\r\n    get bound() {\r\n        return this._geometry ? this._geometry.bound : null;\r\n    }\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound) {\r\n        if (this.visible)\r\n            this._geometry.draw(ctx, projection, extent, this._symbol);\r\n    }\r\n}\r\n","//实体基类\r\nexport class Entity {\r\n    constructor() {\r\n        this._id = null;\r\n        this.create();\r\n    }\r\n    get ID() {\r\n        return this._id;\r\n    }\r\n    toString() {\r\n        return this._id;\r\n    }\r\n    print() {\r\n        Object.keys(this).forEach(property => {\r\n            console.log(property + \": \" + this[property]);\r\n        });\r\n    }\r\n    create() {\r\n        const timestamp = (new Date().getTime() / 1000 | 0).toString(16);\r\n        this._id = timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\r\n            return (Math.random() * 16 | 0).toString(16);\r\n        }).toLowerCase();\r\n    }\r\n}\r\n","import { SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { WebMecator } from \"../projection/web-mecator\";\r\nexport var GeometryType;\r\n(function (GeometryType) {\r\n    GeometryType[GeometryType[\"Point\"] = 0] = \"Point\";\r\n    GeometryType[GeometryType[\"Polyline\"] = 1] = \"Polyline\";\r\n    GeometryType[GeometryType[\"Polygon\"] = 2] = \"Polygon\";\r\n})(GeometryType || (GeometryType = {}));\r\nexport class Geometry {\r\n    get bound() {\r\n        return this._bound;\r\n    }\r\n    project(projection) { }\r\n    ;\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound, symbol = new SimplePointSymbol()) { }\r\n    ;\r\n    contain(screenX, screenY) { return false; }\r\n    intersect(projection = new WebMecator(), extent = projection.bound) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        return extent.intersect(this._bound);\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleMarkerSymbol, SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { WebMecator } from \"../projection/web-mecator\";\r\n//点\r\nexport class Point extends Geometry {\r\n    constructor(lng, lat) {\r\n        super();\r\n        this._lng = lng;\r\n        this._lat = lat;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        [this._x, this._y] = this._projection.project([this._lng, this._lat]);\r\n        //TODO: bound tolerance\r\n        this._bound = new Bound(this._x, this._y, this._x, this._y);\r\n        this._projected = true;\r\n    }\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound, symbol = new SimplePointSymbol()) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._projected)\r\n                this.project(projection);\r\n            if (!extent.intersect(this._bound))\r\n                return;\r\n            ctx.save();\r\n            const matrix = ctx.getTransform();\r\n            this._screenX = (matrix.a * this._x + matrix.e);\r\n            this._screenY = (matrix.d * this._y + matrix.f);\r\n            this._symbol = symbol;\r\n            if (symbol instanceof SimplePointSymbol) {\r\n                ctx.strokeStyle = symbol.strokeStyle;\r\n                ctx.fillStyle = symbol.fillStyle;\r\n                ctx.lineWidth = symbol.lineWidth;\r\n                ctx.beginPath(); //Start path\r\n                //keep size\r\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                ctx.arc(this._screenX, this._screenY, symbol.radius, 0, Math.PI * 2, true);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n            }\r\n            else if (symbol instanceof SimpleMarkerSymbol) {\r\n                const marker = symbol;\r\n                if (!marker.loaded)\r\n                    yield marker.load();\r\n                if (marker.icon) {\r\n                    const matrix = ctx.getTransform();\r\n                    //keep size\r\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                    ctx.drawImage(marker.icon, this._screenX - marker.offsetX, this._screenY - marker.offsetY, marker.width, marker.height);\r\n                }\r\n            }\r\n            ctx.restore();\r\n        });\r\n    }\r\n    ;\r\n    contain(screenX, screenY) {\r\n        if (this._symbol instanceof SimplePointSymbol) {\r\n            return Math.sqrt((this._screenX - screenX) * (this._screenX - screenX) + (this._screenY - screenY) * (this._screenY - screenY)) <= this._symbol.radius;\r\n        }\r\n        else if (this._symbol instanceof SimpleMarkerSymbol) {\r\n            return screenX >= (this._screenX - this._symbol.offsetX) && screenX <= (this._screenX - this._symbol.offsetX + this._symbol.width) && screenY >= (this._screenY - this._symbol.offsetY) && screenY <= (this._screenY - this._symbol.offsetY + this._symbol.height);\r\n        }\r\n    }\r\n}\r\n//interaction: hover && identify\r\nPoint.TOLERANCE = 0; //screen pixel\r\n","import { Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleFillSymbol } from \"../symbol/symbol\";\r\nimport { WebMecator } from \"../projection/web-mecator\";\r\n//面\r\nexport class Polygon extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._lnglats = lnglats;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((ring) => ring.map((point) => this._projection.project(point)));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(ring => {\r\n            ring.forEach(point => {\r\n                xmin = Math.min(xmin, point[0]);\r\n                ymin = Math.min(ymin, point[1]);\r\n                xmax = Math.max(xmax, point[0]);\r\n                ymax = Math.max(ymax, point[1]);\r\n            });\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound, symbol = new SimpleFillSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.fillStyle = symbol.fillStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        const matrix = ctx.getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        //TODO:  ring is not supported\r\n        this._screen = [];\r\n        this._coordinates.forEach(ring => {\r\n            ctx.beginPath();\r\n            const temp = [];\r\n            this._screen.push(temp);\r\n            ring.forEach((point, index) => {\r\n                const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n                if (index === 0) {\r\n                    ctx.moveTo(screenX, screenY);\r\n                }\r\n                else {\r\n                    ctx.lineTo(screenX, screenY);\r\n                }\r\n                temp.push([screenX, screenY]);\r\n            });\r\n            ctx.closePath();\r\n        });\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n    contain(screenX, screenY) {\r\n        //TODO: ring is not supported\r\n        return this._screen.some(ring => this._pointInPolygon([screenX, screenY], ring));\r\n    }\r\n    //from https://github.com/substack/point-in-polygon\r\n    // ray-casting algorithm based on\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    _pointInPolygon(point, vs) {\r\n        let x = point[0], y = point[1];\r\n        let inside = false;\r\n        for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\r\n            let xi = vs[i][0], yi = vs[i][1];\r\n            let xj = vs[j][0], yj = vs[j][1];\r\n            let intersect = ((yi > y) != (yj > y))\r\n                && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n            if (intersect)\r\n                inside = !inside;\r\n        }\r\n        return inside;\r\n    }\r\n    ;\r\n}\r\n","import { Geometry } from \"./geometry\";\r\nimport { Bound } from \"../util/bound\";\r\nimport { SimpleLineSymbol } from \"../symbol/symbol\";\r\nimport { WebMecator } from \"../projection/web-mecator\";\r\n//线\r\nexport class Polyline extends Geometry {\r\n    constructor(lnglats) {\r\n        super();\r\n        this._tolerance = 4; //TOLERANCE + symbol.lineWidth\r\n        this._lnglats = lnglats;\r\n    }\r\n    ;\r\n    project(projection) {\r\n        this._projection = projection;\r\n        this._coordinates = this._lnglats.map((point) => this._projection.project(point));\r\n        let xmin = Number.MAX_VALUE, ymin = Number.MAX_VALUE, xmax = -Number.MAX_VALUE, ymax = -Number.MAX_VALUE;\r\n        this._coordinates.forEach(point => {\r\n            xmin = Math.min(xmin, point[0]);\r\n            ymin = Math.min(ymin, point[1]);\r\n            xmax = Math.max(xmax, point[0]);\r\n            ymax = Math.max(ymax, point[1]);\r\n        });\r\n        this._bound = new Bound(xmin, ymin, xmax, ymax);\r\n    }\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound, symbol = new SimpleLineSymbol()) {\r\n        if (!this._projected)\r\n            this.project(projection);\r\n        if (!extent.intersect(this._bound))\r\n            return;\r\n        ctx.save();\r\n        ctx.strokeStyle = symbol.strokeStyle;\r\n        ctx.lineWidth = symbol.lineWidth;\r\n        this._tolerance = Polyline.TOLERANCE + symbol.lineWidth;\r\n        ctx.beginPath();\r\n        const matrix = ctx.getTransform();\r\n        //keep lineWidth\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        //TODO:  exceeding the maximum extent(bound), best way is overlap by extent. find out: maximum is [-PI*R, PI*R]??\r\n        this._screen = [];\r\n        this._coordinates.forEach((point, index) => {\r\n            const screenX = (matrix.a * point[0] + matrix.e), screenY = (matrix.d * point[1] + matrix.f);\r\n            if (index === 0) {\r\n                ctx.moveTo(screenX, screenY);\r\n            }\r\n            else {\r\n                ctx.lineTo(screenX, screenY);\r\n            }\r\n            this._screen.push([screenX, screenY]);\r\n        });\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n    contain(screenX, screenY) {\r\n        let p2;\r\n        const distance = this._screen.reduce((acc, cur) => {\r\n            if (p2) {\r\n                const p1 = p2;\r\n                p2 = cur;\r\n                return Math.min(acc, this._distanceToSegment([screenX, screenY], p1, p2));\r\n            }\r\n            else {\r\n                p2 = cur;\r\n                return acc;\r\n            }\r\n        }, Number.MAX_VALUE);\r\n        return distance <= this._tolerance;\r\n    }\r\n    //from Leaflet\r\n    _distanceToSegment(p, p1, p2) {\r\n        let x = p1[0], y = p1[1], dx = p2[0] - x, dy = p2[1] - y, dot = dx * dx + dy * dy, t;\r\n        if (dot > 0) {\r\n            t = ((p[0] - x) * dx + (p[1] - y) * dy) / dot;\r\n            if (t > 1) {\r\n                x = p2[0];\r\n                y = p2[1];\r\n            }\r\n            else if (t > 0) {\r\n                x += dx * t;\r\n                y += dy * t;\r\n            }\r\n        }\r\n        dx = p[0] - x;\r\n        dy = p[1] - y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n}\r\n//interaction: hover && identify\r\nPolyline.TOLERANCE = 4; //screen pixel\r\n","export * from './map';\r\nexport * from './entity';\r\nexport * from './data/feature-class';\r\nexport * from './data/field';\r\nexport * from './element/graphic';\r\nexport * from './element/feature';\r\nexport * from './geometry/geometry';\r\nexport * from './geometry/point';\r\nexport * from './geometry/polyline';\r\nexport * from './geometry/polygon';\r\nexport * from './layer/layer';\r\nexport * from './layer/graphic-layer';\r\nexport * from './layer/feature-layer';\r\nexport * from './symbol/symbol';\r\nexport * from './renderer/renderer';\r\nexport * from './renderer/simple-renderer';\r\nexport * from './renderer/category-renderer';\r\nexport * from './renderer/class-renderer';\r\nexport * from './projection/projection';\r\nexport * from './projection/web-mecator';\r\nexport * from './util/utility';\r\nexport * from './util/bound';\r\nexport * from './util/color-generator';\r\n","import { Layer } from \"./layer\";\r\nimport { WebMecator } from \"../projection/web-mecator\";\r\nimport { SimpleRenderer } from \"../renderer/simple-renderer\";\r\nimport { CategoryRenderer } from \"../renderer/category-renderer\";\r\nimport { ClassRenderer } from \"../renderer/class-renderer\";\r\nexport class FeatureLayer extends Layer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._zoom = [3, 20];\r\n        this._interactive = true;\r\n    }\r\n    get interactive() {\r\n        return this._interactive;\r\n    }\r\n    set interactive(value) {\r\n        this._interactive = value;\r\n    }\r\n    set featureClass(value) {\r\n        this._featureClass = value;\r\n    }\r\n    set renderer(value) {\r\n        this._renderer = value;\r\n    }\r\n    set zoom(value) {\r\n        this._zoom = value;\r\n    }\r\n    //地图事件注册监听\r\n    on(event, handler) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.on(event, handler);\r\n        });\r\n    }\r\n    off(event, handler) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.off(event, handler);\r\n        });\r\n    }\r\n    emit(event, param) {\r\n        this._featureClass.features.forEach((feature) => {\r\n            feature.emit(event, param);\r\n        });\r\n    }\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound, zoom = 10) {\r\n        if (this.visible && this._zoom[0] <= zoom && this._zoom[1] >= zoom) {\r\n            this._featureClass.features.forEach((feature) => {\r\n                feature.draw(ctx, projection, extent, this._getSymbol(feature));\r\n            });\r\n        }\r\n    }\r\n    contain(screenX, screenY, projection = new WebMecator(), extent = projection.bound, event = undefined) {\r\n        if (this.visible) {\r\n            return this._featureClass.features.filter((feature) => feature.intersect(projection, extent)).some((feature) => {\r\n                return feature.contain(screenX, screenY, event);\r\n            });\r\n        }\r\n    }\r\n    _getSymbol(feature) {\r\n        if (this._renderer instanceof SimpleRenderer) {\r\n            return this._renderer.symbol;\r\n        }\r\n        else if (this._renderer instanceof CategoryRenderer) {\r\n            const renderer = this._renderer;\r\n            const item = renderer.items.find(item => item.value == feature.properties[renderer.field.name]);\r\n            return item === null || item === void 0 ? void 0 : item.symbol;\r\n        }\r\n        else if (this._renderer instanceof ClassRenderer) {\r\n            const renderer = this._renderer;\r\n            const item = renderer.items.find(item => item.low <= feature.properties[renderer.field.name] && item.high >= feature.properties[renderer.field.name]);\r\n            return item === null || item === void 0 ? void 0 : item.symbol;\r\n        }\r\n    }\r\n}\r\n","import { Layer } from \"./layer\";\r\nimport { WebMecator } from \"../projection/web-mecator\";\r\nexport class GraphicLayer extends Layer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._graphics = [];\r\n    }\r\n    add(graphic) {\r\n        this._graphics.push(graphic);\r\n    }\r\n    remove(graphic) {\r\n        const index = this._graphics.findIndex(item => item === graphic);\r\n        index != -1 && this._graphics.splice(index, 1);\r\n    }\r\n    clear() {\r\n        this._graphics = [];\r\n    }\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound, zoom = 10) {\r\n        if (this.visible) {\r\n            this._graphics.forEach((graphic) => {\r\n                graphic.draw(ctx, projection, extent);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { WebMecator } from \"../projection/web-mecator\";\r\nexport class Layer {\r\n    constructor() {\r\n        this._visible = true;\r\n    }\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    set visible(value) {\r\n        this._visible = value;\r\n    }\r\n    draw(ctx, projection = new WebMecator(), extent = projection.bound, zoom = 10) { }\r\n    ;\r\n}\r\n","import { Bound } from \"./util/bound\";\r\nimport { WebMecator } from \"./projection/web-mecator\";\r\nimport { GraphicLayer } from \"./layer/graphic-layer\";\r\nimport { FeatureLayer } from \"./layer/feature-layer\";\r\nimport { Utility } from \"./util/utility\";\r\nexport class Map {\r\n    constructor(id) {\r\n        this._drag = {\r\n            flag: false,\r\n            start: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            end: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        //地图缩放等级\r\n        this._zoom = 1;\r\n        //地图视图中心\r\n        this._center = [0, 0];\r\n        //地图事件的handlers\r\n        this._events = {\r\n            \"click\": [],\r\n            \"extent\": [] //view updated\r\n        };\r\n        this._defaultGraphicLayer = new GraphicLayer();\r\n        this._layers = [];\r\n        this._canvas = document.getElementById(id);\r\n        this._ctx = this._canvas.getContext(\"2d\");\r\n        this._canvas.addEventListener(\"click\", this._onClick.bind(this));\r\n        this._canvas.addEventListener(\"dblclick\", this._onDoubleClick.bind(this));\r\n        this._canvas.addEventListener(\"mousedown\", this._onMouseDown.bind(this));\r\n        this._canvas.addEventListener(\"mousemove\", this._onMouseMove.bind(this));\r\n        this._canvas.addEventListener(\"mouseup\", this._onMouseUp.bind(this));\r\n        this._canvas.addEventListener(\"wheel\", this._onWheel.bind(this));\r\n        this._projection = new WebMecator();\r\n        this._center = [0, 0];\r\n        this._zoom = 3;\r\n        //Latlng [-180, 180] [-90, 90]\r\n        //this._ctx.setTransform(256/180 * Math.pow(2, this._zoom - 1), 0, 0, -256/90 * Math.pow(2, this._zoom - 1), this._canvas.width/2, this._canvas.height/2);\r\n        const bound = this._projection.bound;\r\n        //设置初始矩阵，由于地图切片是256*256，Math.pow(2, this._zoom)代表在一定缩放级别下x与y轴的切片数量\r\n        this._ctx.setTransform(256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale, 0, 0, 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale, this._canvas.width / 2, this._canvas.height / 2);\r\n    }\r\n    get projection() {\r\n        return this._projection;\r\n    }\r\n    //设置视图级别及视图中心\r\n    setView(center = [0, 0], zoom = 3) {\r\n        this._center = center;\r\n        this._zoom = Math.max(3, Math.min(20, zoom));\r\n        //center为经纬度，转化为平面坐标\r\n        const origin = this._projection.project(center);\r\n        const bound = this._projection.bound;\r\n        //已知：matrix 转换前 坐标origin，转换后坐标 即canvas的中心 [this._canvas.width / 2, this._canvas.height / 2]\r\n        //求：转换矩阵\r\n        //解法如下：\r\n        const a = 256 * Math.pow(2, this._zoom) / (bound.xmax - bound.xmin) * bound.xscale;\r\n        const d = 256 * Math.pow(2, this._zoom) / (bound.ymax - bound.ymin) * bound.yscale;\r\n        const e = this._canvas.width / 2 - a * origin[0];\r\n        const f = this._canvas.height / 2 - d * origin[1];\r\n        this._ctx.setTransform(a, 0, 0, d, e, f);\r\n        this.redraw();\r\n    }\r\n    //地图事件注册监听\r\n    on(event, handler) {\r\n        this._events[event].push(handler);\r\n    }\r\n    off(event, handler) {\r\n        if (Array.isArray(this._events[event])) {\r\n            const index = this._events[event].findIndex(item => item === handler);\r\n            index != -1 && this._events[event].splice(index, 1);\r\n        }\r\n    }\r\n    emit(event, param) {\r\n        this._events[event].forEach(handler => handler(param));\r\n    }\r\n    addLayer(layer) {\r\n        this._layers.push(layer);\r\n        layer.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    removeLayer(layer) {\r\n        const index = this._layers.findIndex(item => item === layer);\r\n        index != -1 && this._layers.splice(index, 1);\r\n        this.redraw();\r\n    }\r\n    clearLayers() {\r\n        this._layers = [];\r\n        this.redraw();\r\n    }\r\n    //shortcut\r\n    addGraphic(graphic) {\r\n        this._defaultGraphicLayer.add(graphic);\r\n        graphic.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    removeGraphic(graphic) {\r\n        this._defaultGraphicLayer.remove(graphic);\r\n        this._defaultGraphicLayer.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    clearGraphics() {\r\n        this._defaultGraphicLayer.clear();\r\n        this._defaultGraphicLayer.draw(this._ctx, this._projection, this._extent);\r\n    }\r\n    //更新地图视图范围以及中心点\r\n    updateExtent() {\r\n        const matrix = this._ctx.getTransform();\r\n        const x1 = (0 - matrix.e) / matrix.a, y1 = (0 - matrix.f) / matrix.d, x2 = (this._canvas.width - matrix.e) / matrix.a, y2 = (this._canvas.height - matrix.f) / matrix.d;\r\n        this._extent = new Bound(Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2));\r\n        this._center = this._projection.unproject([(x1 + x2) / 2, (y1 + y2) / 2]);\r\n        this._events.extent.forEach(handler => handler({ extent: this._extent, center: this._center, zoom: this._zoom, matrix: matrix }));\r\n    }\r\n    redraw() {\r\n        this._ctx.save();\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        /* //start axis\r\n        this._ctx.strokeStyle = \"#0000ff\";\r\n        //x axis\r\n        this._ctx.lineWidth = 1;\r\n        this._ctx.beginPath();\r\n        this._ctx.moveTo(0, this._canvas.height/2);\r\n        this._ctx.lineTo(this._canvas.width, this._canvas.height/2);\r\n        this._ctx.stroke();\r\n        //y axis\r\n        this._ctx.beginPath();\r\n        this._ctx.moveTo(this._canvas.width/2, this._canvas.height);\r\n        this._ctx.lineTo(this._canvas.width/2, 0);\r\n        this._ctx.stroke();\r\n        //end axis*/\r\n        this._ctx.restore();\r\n        this.updateExtent();\r\n        this._defaultGraphicLayer.draw(this._ctx, this._projection, this._extent);\r\n        this._layers.forEach(layer => {\r\n            layer.draw(this._ctx, this._projection, this._extent, this._zoom);\r\n        });\r\n    }\r\n    clear() {\r\n        this._ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n        this.updateExtent();\r\n    }\r\n    _onClick(event) {\r\n        const flag = this._layers.filter(layer => (layer instanceof FeatureLayer) && layer.interactive).some((layer) => layer.contain(event.offsetX, event.offsetY, this._projection, this._extent, \"click\"));\r\n        if (!flag) {\r\n            this._events.click.forEach(handler => handler({ event: event }));\r\n        }\r\n    }\r\n    _onDoubleClick(event) {\r\n        if (this._zoom >= 20)\r\n            return;\r\n        const scale = 2;\r\n        this._zoom += 1;\r\n        const matrix = this._ctx.getTransform();\r\n        const a1 = matrix.a, e1 = matrix.e, x1 = event.offsetX, x2 = x1; //放大到中心点 x2 = this._canvas.width / 2\r\n        const e = (x2 - scale * (x1 - e1) - e1) / a1;\r\n        const d1 = matrix.d, f1 = matrix.f, y1 = event.offsetY, y2 = y1; //放大到中心点 y2 = this._canvas.height / 2\r\n        const f = (y2 - scale * (y1 - f1) - f1) / d1;\r\n        this._ctx.transform(scale, 0, 0, scale, e, f);\r\n        this.redraw();\r\n    }\r\n    _onMouseDown(event) {\r\n        this._drag.flag = true;\r\n        this._drag.start.x = event.x;\r\n        this._drag.start.y = event.y;\r\n    }\r\n    _onMouseMove(event) {\r\n        if (!this._drag.flag) {\r\n            const flag = this._layers.filter(layer => (layer instanceof FeatureLayer) && layer.interactive).some((layer) => layer.contain(event.offsetX, event.offsetY, this._projection, this._extent, \"mousemove\"));\r\n            if (flag) {\r\n                Utility.addClass(this._canvas, \"green-hover\");\r\n            }\r\n            else {\r\n                Utility.removeClass(this._canvas, \"green-hover\");\r\n            }\r\n        }\r\n    }\r\n    _onMouseUp(event) {\r\n        if (this._drag.flag) {\r\n            this._drag.end.x = event.x;\r\n            this._drag.end.y = event.y;\r\n            const matrix = this._ctx.getTransform();\r\n            this._ctx.translate((this._drag.end.x - this._drag.start.x) / matrix.a, (this._drag.end.y - this._drag.start.y) / matrix.d);\r\n            this.redraw();\r\n        }\r\n        this._drag.flag = false;\r\n    }\r\n    _onWheel(event) {\r\n        let scale = 1;\r\n        const sensitivity = 100;\r\n        const delta = event.deltaY / sensitivity;\r\n        if (delta < 0) {\r\n            if (this._zoom >= 20)\r\n                return;\r\n            // 放大\r\n            scale *= delta * -2;\r\n        }\r\n        else {\r\n            // 缩小\r\n            if (this._zoom <= 3)\r\n                return;\r\n            scale /= delta * 2;\r\n        }\r\n        const zoom = Math.round(Math.log(scale));\r\n        scale = Math.pow(2, zoom);\r\n        this._zoom += zoom;\r\n        //交互表现为 鼠标当前位置 屏幕坐标不变 进行缩放 即x2 = x1\r\n        //第一种方案，坐标系不变，变坐标值\r\n        //1.将原屏幕坐标 x1 转成 初始坐标 x0 = (x1 - e1) / a1  初始矩阵 (1,0,0,1,0,0)\r\n        //2.初始坐标x0 转成 现屏幕坐标x2  a2 * x0 + e2 = x2    e2 = x2 - a2 * x0  代入1式 e2 = x2 - a2 * (x1 - e1) / a1\r\n        //3.已知scale = a2 / a1  故 e2 = x2 - scale * (x1 - e1)\r\n        //4.另矩阵变换 a1 * e + e1 = e2\r\n        //5.联立3和4  求得 e = (x2 - scale * (x1 - e1) - e1) / a1\r\n        const matrix = this._ctx.getTransform();\r\n        const a1 = matrix.a, e1 = matrix.e, x1 = event.x, x2 = x1; //放大到中心点 x2 = this._canvas.width / 2\r\n        const e = (x2 - scale * (x1 - e1) - e1) / a1;\r\n        const d1 = matrix.d, f1 = matrix.f, y1 = event.y, y2 = y1; //放大到中心点 y2 = this._canvas.height / 2\r\n        const f = (y2 - scale * (y1 - f1) - f1) / d1;\r\n        this._ctx.transform(scale, 0, 0, scale, e, f);\r\n        this.redraw();\r\n    }\r\n    destroy() {\r\n        this._canvas.removeEventListener(\"click\", this._onClick);\r\n        this._canvas.removeEventListener(\"dblclick\", this._onDoubleClick);\r\n        this._canvas.removeEventListener(\"mousedown\", this._onMouseDown);\r\n        this._canvas.removeEventListener(\"mousemove\", this._onMouseMove);\r\n        this._canvas.removeEventListener(\"mouseup\", this._onMouseUp);\r\n        this._canvas.removeEventListener(\"wheel\", this._onWheel);\r\n    }\r\n}\r\n","//TODO: only support web mecator\r\nexport class Projection {\r\n    //经纬度转平面坐标\r\n    project([lng, lat]) { return []; }\r\n    ;\r\n    //平面坐标转经纬度\r\n    unproject([x, y]) { return []; }\r\n    ;\r\n    //投影后的平面坐标范围\r\n    get bound() { return null; }\r\n    ;\r\n}\r\n","import { Bound } from \"../util/bound\";\r\nexport class WebMecator {\r\n    //投影后的平面坐标范围\r\n    get bound() {\r\n        return new Bound(-Math.PI * WebMecator.R, Math.PI * WebMecator.R, Math.PI * WebMecator.R, -Math.PI * WebMecator.R);\r\n    }\r\n    //经纬度转平面坐标\r\n    project([lng, lat]) {\r\n        //from leaflet & wiki\r\n        const d = Math.PI / 180, sin = Math.sin(lat * d);\r\n        return [WebMecator.R * lng * d, WebMecator.R * Math.log((1 + sin) / (1 - sin)) / 2];\r\n    }\r\n    //平面坐标转经纬度\r\n    unproject([x, y]) {\r\n        const d = 180 / Math.PI;\r\n        return [x * d / WebMecator.R, (2 * Math.atan(Math.exp(y / WebMecator.R)) - (Math.PI / 2)) * d];\r\n    }\r\n}\r\nWebMecator.R = 6378137;\r\n","import { SimpleFillSymbol, SimpleLineSymbol, SimplePointSymbol } from \"../symbol/symbol\";\r\nimport { GeometryType } from \"../geometry/geometry\";\r\nimport { ColorGenerator } from \"../util/color-generator\";\r\nexport class CategoryRendererItem {\r\n    constructor() {\r\n        this.count = 1;\r\n    }\r\n}\r\nexport class CategoryRenderer {\r\n    constructor() {\r\n        this._items = [];\r\n    }\r\n    get field() {\r\n        return this._field;\r\n    }\r\n    get items() {\r\n        return this._items;\r\n    }\r\n    generate(featureClass, field) {\r\n        this._field = field;\r\n        this._items = [];\r\n        featureClass.features.map(feature => feature.properties[field.name]).forEach((value) => {\r\n            const item = this._items.find(item => item.value == value);\r\n            if (item) {\r\n                item.count += 1;\r\n            }\r\n            else {\r\n                const item = new CategoryRendererItem();\r\n                switch (featureClass.type) {\r\n                    case GeometryType.Point:\r\n                        const symbol1 = new SimplePointSymbol();\r\n                        symbol1.fillStyle = ColorGenerator.random();\r\n                        symbol1.strokeStyle = ColorGenerator.random();\r\n                        item.symbol = symbol1;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                    case GeometryType.Polyline:\r\n                        const symbol2 = new SimpleLineSymbol();\r\n                        symbol2.strokeStyle = ColorGenerator.random();\r\n                        item.symbol = symbol2;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                    case GeometryType.Polygon:\r\n                        const symbol3 = new SimpleFillSymbol();\r\n                        symbol3.fillStyle = ColorGenerator.random();\r\n                        symbol3.strokeStyle = ColorGenerator.random();\r\n                        item.symbol = symbol3;\r\n                        item.value = value;\r\n                        this._items.push(item);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","export class ClassRendererItem {\r\n}\r\nexport class ClassRenderer {\r\n    constructor() {\r\n        this._items = [];\r\n    }\r\n    get field() {\r\n        return this._field;\r\n    }\r\n    get items() {\r\n        return this._items;\r\n    }\r\n    generate(featureClass, field, breaks) {\r\n        this._field = field;\r\n        this._items = [];\r\n        //TODO auto class break\r\n    }\r\n}\r\n","export class Renderer {\r\n}\r\n","export class SimpleRenderer {\r\n}\r\n","export class Symbol {\r\n}\r\nexport class SimplePointSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        //circle\r\n        this.radius = 10;\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n        this.fillStyle = \"#ff0000\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleLineSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleFillSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lineWidth = 1;\r\n        this.strokeStyle = \"#ff0000\"; //#ff0000\r\n        this.fillStyle = \"#ff0000\"; //#ff0000\r\n    }\r\n}\r\nexport class SimpleMarkerSymbol extends Symbol {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.width = 16;\r\n        this.height = 16;\r\n        this.offsetX = 8;\r\n        this.offsetY = 8;\r\n    }\r\n    get loaded() {\r\n        return this._loaded;\r\n    }\r\n    load() {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image();\r\n            img.onload = () => {\r\n                createImageBitmap(img).then(icon => {\r\n                    this.icon = icon;\r\n                    this._loaded = true;\r\n                    resolve(icon);\r\n                }, err => reject(err));\r\n            };\r\n            img.onerror = reject;\r\n            img.src = this.url;\r\n        });\r\n    }\r\n}\r\n","export class Bound {\r\n    constructor(xmin, ymin, xmax, ymax) {\r\n        //+1代表 x方向为自西向东，-1则反之\r\n        this._xscale = 1;\r\n        //+1代表 y方向为自北向南，-1则反之\r\n        this._yscale = 1;\r\n        this._xmin = Math.min(xmin, xmax);\r\n        this._ymin = Math.min(ymin, ymax);\r\n        this._xmax = Math.max(xmin, xmax);\r\n        this._ymax = Math.max(ymin, ymax);\r\n        this._xscale = xmin <= xmax ? 1 : -1;\r\n        this._yscale = ymin <= ymax ? 1 : -1;\r\n    }\r\n    get xmin() {\r\n        return this._xmin;\r\n    }\r\n    get ymin() {\r\n        return this._ymin;\r\n    }\r\n    get xmax() {\r\n        return this._xmax;\r\n    }\r\n    get ymax() {\r\n        return this._ymax;\r\n    }\r\n    get xscale() {\r\n        return this._xscale;\r\n    }\r\n    get yscale() {\r\n        return this._yscale;\r\n    }\r\n    //是否交叉叠盖\r\n    intersect(bound) {\r\n        return (bound.xmax >= this._xmin) && (bound.xmin <= this._xmax) && (bound.ymax >= this._ymin) && (bound.ymin <= this._ymax);\r\n    }\r\n}\r\n","export class ColorGenerator {\r\n    static random() {\r\n        return \"rgb(\" + Math.random() * 255 + \",\" + Math.random() * 255 + \",\" + Math.random() * 255 + \")\";\r\n    }\r\n}\r\n","export class Utility {\r\n    // @function addClass(el: HTMLElement, name: String)\r\n    // Adds `name` to the element's class attribute.\r\n    static addClass(el, name) {\r\n        if (el.classList !== undefined) {\r\n            el.classList.add(name);\r\n        }\r\n        else if (!Utility.hasClass(el, name)) {\r\n            var className = Utility.getClass(el);\r\n            Utility.setClass(el, (className ? className + ' ' : '') + name);\r\n        }\r\n    }\r\n    // @function removeClass(el: HTMLElement, name: String)\r\n    // Removes `name` from the element's class attribute.\r\n    static removeClass(el, name) {\r\n        if (el.classList !== undefined) {\r\n            el.classList.remove(name);\r\n        }\r\n        else {\r\n            Utility.setClass(el, (' ' + Utility.getClass(el) + ' ').replace(' ' + name + ' ', ' ').trim());\r\n        }\r\n    }\r\n    // @function hasClass(el: HTMLElement, name: String): Boolean\r\n    // Returns `true` if the element's class attribute contains `name`.\r\n    static hasClass(el, name) {\r\n        if (el.classList !== undefined) {\r\n            return el.classList.contains(name);\r\n        }\r\n        var className = Utility.getClass(el);\r\n        return className.length > 0 && new RegExp('(^|\\\\s)' + name + '(\\\\s|$)').test(className);\r\n    }\r\n    // @function setClass(el: HTMLElement, name: String)\r\n    // Sets the element's class.\r\n    static setClass(el, name) {\r\n        if (el.className.baseVal === undefined) {\r\n            el.className = name;\r\n        }\r\n        else {\r\n            // in case of SVG element\r\n            el.className.baseVal = name;\r\n        }\r\n    }\r\n    // @function getClass(el: HTMLElement): String\r\n    // Returns the element's class.\r\n    static getClass(el) {\r\n        // Check if the element is an SVGElementInstance and use the correspondingElement instead\r\n        // (Required for linked SVG elements in IE11.)\r\n        if (el.correspondingElement) {\r\n            el = el.correspondingElement;\r\n        }\r\n        return el.className.baseVal === undefined ? el.className : el.className.baseVal;\r\n    }\r\n}\r\n","import {\r\n    Map,\r\n    Point,\r\n    Polyline,\r\n    SimpleFillSymbol,\r\n    FeatureClass,\r\n    FeatureLayer,\r\n    SimpleRenderer,\r\n    CategoryRenderer,\r\n    CategoryRendererItem,\r\n    Field,\r\n    FieldType,\r\n    Graphic, SimpleMarkerSymbol, Feature\r\n} from \"../dist\";\r\n\r\nvar AMap = window.AMap;\r\n\r\nwindow.load = () => {\r\n\r\n    const amap = new AMap.Map(\"amap\", {\r\n        fadeOnZoom: false,\r\n        navigationMode: 'classic',\r\n        optimizePanAnimation: false,\r\n        animateEnable: false,\r\n        dragEnable: false,\r\n        zoomEnable: false,\r\n        resizeEnable: true,\r\n        doubleClickZoom: false,\r\n        keyboardEnable: false,\r\n        scrollWheel: false,\r\n        expandZoomRange: true,\r\n        zooms: [1, 20],\r\n        mapStyle: 'normal',\r\n        features: ['road', 'point', 'bg'],\r\n        viewMode: '2D'\r\n    });\r\n\r\n    const map = new Map(\"foo\");\r\n    map.on(\"extent\", (event) => {\r\n        amap.setZoomAndCenter(event.zoom, event.center);\r\n        document.getElementById(\"x\").value = Math.round(event.center[0] * 1000)/1000;\r\n        document.getElementById(\"y\").value = Math.round(event.center[1] * 1000)/1000;\r\n        document.getElementById(\"zoom\").value = event.zoom;\r\n        document.getElementById(\"x1\").value = Math.round(event.extent.xmin * 1000)/1000;\r\n        document.getElementById(\"y1\").value = Math.round(event.extent.ymin * 1000)/1000;\r\n        document.getElementById(\"x2\").value = Math.round(event.extent.xmax * 1000)/1000;\r\n        document.getElementById(\"y2\").value = Math.round(event.extent.ymax * 1000)/1000;\r\n        document.getElementById(\"a\").value = Math.round(event.matrix.a * 1000)/1000;\r\n        document.getElementById(\"d\").value = Math.round(event.matrix.d * 1000)/1000;\r\n        document.getElementById(\"e\").value = Math.round(event.matrix.e * 1000)/1000;\r\n        document.getElementById(\"f\").value = Math.round(event.matrix.f * 1000)/1000;\r\n    });\r\n    map.setView([107.411, 29.89], 7);\r\n\r\n    var req = new XMLHttpRequest();\r\n    req.onload = (event) => {\r\n        const featureClass = new FeatureClass();\r\n        featureClass.loadGeoJSON(JSON.parse(req.responseText));\r\n        const featureLayer = new FeatureLayer();\r\n        featureLayer.featureClass = featureClass;\r\n        const field = new Field();\r\n        field.name = \"name\";\r\n        field.type = FieldType.String;\r\n        const renderer = new CategoryRenderer();\r\n        renderer.generate(featureClass, field);\r\n\r\n        /*renderer.field = field;\r\n        let item = new CategoryRendererItem();\r\n        item.value = \"WEAR\";\r\n        const symbol1 = new SimpleFillSymbol();\r\n        symbol1.fillStyle = \"#0868ac\";\r\n        symbol1.strokeStyle = \"#084081\";\r\n        item.symbol = symbol1;\r\n        renderer.items.push(item);\r\n        item = new CategoryRendererItem();\r\n        item.value = \"GAAR\";\r\n        const symbol2 = new SimpleFillSymbol();\r\n        symbol2.fillStyle = \"#1a9850\";\r\n        symbol2.strokeStyle = \"#006837\";\r\n        item.symbol = symbol2;\r\n        renderer.items.push(item);*/\r\n            /*const renderer = new SimpleRenderer();\r\n            renderer.symbol = new SimpleFillSymbol();*/\r\n        featureLayer.renderer = renderer;\r\n        featureLayer.zoom = [5, 20];\r\n        featureLayer.on(\"click\", (event) => {\r\n            console.log(event.feature.properties[\"name\"], \"click\");\r\n        });\r\n        featureLayer.on(\"mouseover\", (event) => {\r\n            console.log(event.feature.properties[\"name\"], \"mouse over\");\r\n        });\r\n        featureLayer.on(\"mouseover\", (event) => {\r\n            console.log(event.feature.properties[\"name\"], \"mouse out\");\r\n        });\r\n        map.addLayer(featureLayer);\r\n    };\r\n    req.open(\"GET\", \"assets/geojson/chongqing.json\", true);\r\n    req.send(null);\r\n\r\n\r\n    //beijing gugong\r\n    const point = new Point(116.397411,39.909186);\r\n    const feature = new Feature(point, {});\r\n    const featureClass = new FeatureClass();\r\n    featureClass.addFeature(feature);\r\n    const marker = new SimpleMarkerSymbol();\r\n    marker.width = 32;\r\n    marker.height = 32;\r\n    marker.offsetX = 16;\r\n    marker.offsetY = 32;\r\n    marker.url = \"assets/img/marker.svg\";\r\n    const featureLayer = new FeatureLayer();\r\n    featureLayer.featureClass = featureClass;\r\n    const renderer = new SimpleRenderer();\r\n    renderer.symbol = marker;\r\n    featureLayer.renderer = renderer;\r\n    map.addLayer(featureLayer);\r\n\r\n}\r\n"],"sourceRoot":""}